---
title: "Week 7 Workbook"
author: "Emorie D Beck"
format: 
  html:
    code-tools: true
    code-copy: true
    code-line-numbers: true
    code-link: true
    theme: united
    highlight-style: tango
    df-print: paged
    code-fold: show
    toc: true
    toc-float: true
    self-contained: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r, echo = F}
pkg <- c("knitr", "psych", "lme4", "broom", "broom.mixed", "kableExtra", "lubridate", "plyr", "tidyverse")
pkg <- pkg[!pkg %in% rownames(installed.packages())]
if(length(pkg) > 0) map(pkg, install.packages)

library(knitr)
library(psych)
library(lme4)
library(broom)
library(broom.mixed)
library(kableExtra)
library(lubridate)
library(plyr)
library(tidyverse)
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      message = FALSE,	
                      warning = FALSE,
                      results = 'show',
                      fig.width = 4, 
                      fig.height = 4, 
                      fig.retina = 3)
options(htmltools.dir.version = FALSE
        , knitr.kable.NA = "")
```

# Week 7 - Strings & Dates

# Outline

1.  Questions on Homework
2.  Strings
3.  Regex
4.  Dates

## Dataset we will use

We will use `rtweet` to pull Twitter data from the PAC-12 universities. We will use the university admissions Twitter handle if there is one, or the main Twitter handle for the university if there isn't one:

```{r, echo = F}
# library(rtweet)
# 
# p12 <- c("uaadmissions", "FutureSunDevils", "caladmissions", "UCLAAdmission",
#          "futurebuffs", "uoregon", "BeaverVIP", "USCAdmission",
#          "engagestanford", "UtahAdmissions", "UW", "WSUPullman")
# p12_full_df <- search_tweets(paste0("from:", p12, collapse = " OR "), n = 500)
# 
# saveRDS(p12_full_df, "p12_dataset.RDS")
```

```{r}
# Load previously pulled Twitter data
p12_full_df <- readRDS("week7-data.RDS")
glimpse(p12_full_df)

p12_df <- p12_full_df |> 
  select(user_id, created_at, screen_name, text, location)
head(p12_df)
```

# String basics

What are **strings**?

-   String is a type of data in R
-   You can create strings using either single quotes (`'`) or double quotes (`"`)
    -   Internally, R stores strings using double quotes
-   The `class()` and `typeof()` a string is `character`

## Creating Strings

**Creating string using single quotes**

Notice how R stores strings using double quotes internally:

```{r}
my_string <- 'This is a string'
my_string
```

**Creating string using double quotes**

```{r}
my_string <- "Strings can also contain numbers: 123"
my_string
```

**Checking class and type of strings**

```{r}
class(my_string)
typeof(my_string)
```

**Quotes in quotes**

**Note**: To include quotes as part of the string, we can either use the other type of quotes to surround the string (i.e., `'` or `"`) or escape the quote using a backslash (`\`).

```{r}
# Include quote by using the other type of quotes to surround the string 
my_string <- "There's no issues with this string."
my_string
```

```{r}
# Include quote of the same type by escaping it with a backslash
my_string <- 'There\'s no issues with this string.'
my_string
```

```{r, eval=F}
# This would not work
my_string <- 'There's an issue with this string.'
my_string
```

# `stringr` package

> "A consistent, simple and easy to use set of wrappers around the fantastic `stringi` package. All function and argument names (and positions) are consistent, all functions deal with `NA`'s and zero length vectors in the same way, and the output from one function is easy to feed into the input of another."

*Credit: `stringr`[R documentation](https://www.rdocumentation.org/packages/stringr/versions/1.4.0)*

-   The `stringr` package is based off the `stringi` package and is part of **Tidyverse**
-   `stringr` contains functions to work with strings
-   For many functions in the `stringr` package, there are equivalent "base R" functions
-   But `stringr` functions all follow the same rules, while rules often differ across different "base R" string functions, so we will focus exclusively on `stringr` functions
-   Most `stringr` functions start with `str_` (e.g., `str_length`)

## `str_length()`

**The `str_length()` function**: - Function: Find string length

```{r, eval = FALSE}
?str_length
```

```{r, eval = FALSE}
# SYNTAX
str_length(string)
```

-   Arguments:
    -   `string`: Character vector (or vector coercible to character)
-   Note that `str_length()` calculates the length of a string, whereas the `length()` function (which is not part of `stringr` package) calculates the number of elements in an object

**Using `str_length()` on string**

```{r}
str_length("cats")
```

Compare to `length()`, which treats the string as a single object:

```{r}
length("cats")
```

**`str_length()` on character vector**

```{r}
str_length(c("cats", "in", "hat"))
```

Compare to `length()`, which finds the number of elements in the vector:

```{r}
length(c("cats", "in", "hat"))
```

**Using `str_length()` on other vectors coercible to character**

-   `Logical` vectors can be coerced to character vectors:

```{r}
str_length(c(TRUE, FALSE))
```

-   `Numeric` vectors can be coerced to character vectors:

```{r}
str_length(c(1, 2.5, 3000))
```

-   `Integer` vectors can be coerced to character vectors:

```{r}
str_length(c(2L, 100L))
```

**Using `str_length()` on dataframe column**

Recall that the columns in a dataframe are just vectors, so we can use `str_length()` as long as the vector is coercible to character type.

```{r}
str_length(p12_df$screen_name[1:20])
```

```{r}
p12_df %>% select(screen_name) %>% unique() %>% 
  mutate(screen_name_len = str_length(screen_name))
```

## `str_c()`

**The `str_c()` function**:

-   Function: Concatenate strings between vectors (element-wise)

```{r, eval = FALSE}
?str_c

# SYNTAX AND DEFAULT VALUES
str_c(..., sep = "", collapse = NULL)
```

-   Arguments:
    -   The input is one or more character vectors (or vectors coercible to character)
        -   Zero length arguments are removed
        -   Short arguments are recycled to the length of the longest
    -   `sep`: String to insert between input vectors
    -   `collapse`: Optional string used to combine input vectors into single string

**Using `str_c()` on one vector**

Since we only provided one input vector, it has nothing to concatenate with, so `str_c()` will just return the same vector:

```{r}
str_c(c("a", "b", "c"))
```

**Using `str_c()` on one vector**

Note that specifying the `sep` argument will also not have any effect because we only have one input vector, and `sep` is the separator between multiple vectors:

```{r}
str_c(c("a", "b", "c"), sep = "~")

# Check length: Output is the original vector of 3 elements
str_c(c("a", "b", "c")) %>% length()
```

**Using `str_c()` on one vector**

-   As seen on the previous slide, `str_c()` returns a vector by default (because the default value for the `collapse` argument is `NULL`).
-   But we can specify a string for `collapse` in order to collapse the elements of the output vector into a single string:

```{r}
str_c(c("a", "b", "c"), collapse = "|")

# Check length: Output vector of length 3 is collapsed into a single string
str_c(c("a", "b", "c"), collapse = "|") %>% length()

# Check str_length: This gives the length of the collapsed string, which is 5 characters long
str_c(c("a", "b", "c"), collapse = "|") %>% str_length()
```

**Using `str_c()` on more than one vector**

When we provide multiple input vectors, we can see that the vectors get concatenated element-wise (i.e., 1st element from each vector are concatenated, 2nd element from each vector are concatenated, etc):

```{r}
str_c(c("a", "b", "c"), c("x", "y", "z"), c("!", "?", ";"))
```

**Using `str_c()` on more than one vector**

The default separator for each element-wise concatenation is an empty string (`""`), but we can customize that by specifying the `sep` argument:

```{r}
str_c(c("a", "b", "c"), c("x", "y", "z"), c("!", "?", ";"), sep = "~")

# Check length: Output vector is same length as input vectors
str_c(c("a", "b", "c"), c("x", "y", "z"), c("!", "?", ";"), sep = "~") %>% length()
```

**Using `str_c()` on more than one vector**

Again, we can specify the `collapse` argument in order to collapse the elements of the output vector into a single string:

```{r}
str_c(c("a", "b", "c"), c("x", "y", "z"), c("!", "?", ";"), collapse = "|")

# Check length: Output vector of length 3 is collapsed into a single string
str_c(c("a", "b", "c"), c("x", "y", "z"), c("!", "?", ";"), collapse = "|") %>% length()

# Specifying both `sep` and `collapse`
str_c(c("a", "b", "c"), c("x", "y", "z"), c("!", "?", ";"), sep = "~", collapse = "|")
```

## `str_sub()` {.smaller}

**The `str_sub()` function**:

-   Function: Subset strings
-   Arguments:
    -   `string`: Character vector (or vector coercible to character)
    -   `start`: Position of first character to be included in substring (default: `1`)
    -   `end`: Position of last character to be included in substring (default: `-1`)
        -   Negative index = counting backwards
    -   `omit_na`: If `TRUE`, missing values in any of the arguments provided will result in an unchanged input

```{r, eval = FALSE}
?str_sub

# SYNTAX AND DEFAULT VALUES
str_sub(string, start = 1L, end = -1L)
str_sub(string, start = 1L, end = -1L, omit_na = FALSE) <- value
```

-   When `str_sub()` is used in the assignment form, you can replace the subsetted part of the string with a `value` of your choice
    -   If an element in the vector is too short to meet the subset specification, the replacement `value` will be concatenated to the end of that element
    -   Note that this modifies your input vector directly, so you must have the vector saved to a variable (see example below)

**Using `str_sub()` to subset strings**

If no `start` and `end` positions are specified, `str_sub()` will by default return the entire (original) string:

```{r}
str_sub(string = c("abcdefg", 123, TRUE))
```

Note that if an element is shorter than the specified `end` (i.e., `123` in the example below), it will just include all the available characters that it does have:

```{r}
str_sub(string = c("abcdefg", 123, TRUE), start = 2, end = 4)
```

Remember we can also use negative index to count the position starting from the back:

```{r}
str_sub(c("abcdefg", 123, TRUE), start = 2, end = -2)
```

**Using `str_sub()` to replace strings**

If no `start` and `end` positions are specified, `str_sub()` will by default return the original string, so the entire string would be replaced:

```{r}
v <- c("A", "AB", "ABC", "ABCD", "ABCDE")
str_sub(v, start = 1,end =-1)

str_sub(v, start = 1,end =-1) <- "*"
v
```

**Using `str_sub()` on dataframe column**

We can use `as.character()` to turn the `created_at` value to a string, then use `str_sub()` to extract out various date/time components from the string:

```{r}
p12_datetime_df <- p12_df %>% select(created_at) %>%
  mutate(
      dt_chr = as.character(created_at),
      date_chr = str_sub(dt_chr, 1, 10),
      yr_chr = str_sub(dt_chr, 1, 4),
      mth_chr = str_sub(dt_chr, 6, 7),
      day_chr = str_sub(dt_chr, 9, 10),
      hr_chr = str_sub(dt_chr, -8, -7),
      min_chr = str_sub(dt_chr, -5, -4),
      sec_chr = str_sub(dt_chr, -2, -1)
    )

p12_datetime_df
```

## Other `stringr` functions

Other useful `stringr` functions:

-   `str_to_upper()`: Turn strings to uppercase
-   `str_to_lower()`: Turn strings to lowercase
-   `str_sort()`: Sort a character vector
-   `str_trim()`: Trim whitespace from strings (including `\n`, `\t`, etc.)
-   `str_pad()`: Pad strings with specified character

### Using `str_to_upper()` to turn strings to uppercase

Turn column names of `p12_df` to uppercase:

```{r}
# Column names are originally lowercase
names(p12_df)

# Turn column names to uppercase
names(p12_df) <- str_to_upper(names(p12_df))
names(p12_df)
```

### Using `str_to_lower()` to turn strings to lowercase

Turn column names of `p12_df` to lowercase:

```{r}
# Column names are originally uppercase
names(p12_df)

# Turn column names to lowercase
names(p12_df) <- str_to_lower(names(p12_df))
names(p12_df)
```

### Using `str_sort()` to sort character vector

Sort the vector of `p12_df` column names:

```{r}
# Before sort
names(p12_df)

# Sort alphabetically (default)
str_sort(names(p12_df))

# Sort reverse alphabetically
str_sort(names(p12_df), decreasing = TRUE)
```

### Using `str_trim()` to trim whitespace from string

```{r}
# Trim whitespace from both left and right sides (default)
str_trim(c("\nABC ", " XYZ\t"))

# Trim whitespace from left side
str_trim(c("\nABC ", " XYZ\t"), side = "left")

# Trim whitespace from right side
str_trim(c("\nABC ", " XYZ\t"), side = "right")
```

### Using `str_pad()` to pad string with character

Let's say we have a vector of zip codes that has lost all leading 0's. We can use `str_pad()` to add that back in:

```{r}
# Pad the left side of strings with "0" until width of 5 is reached
str_pad(c(95035, 90024, 5009, 5030), width = 5, side = "left", pad = "0")
```

# Regular expression basics

## Example of using **regular expression** in action:

-   How can we **match all occurrences of times** in the following string? (i.e., `10 AM` and `1 PM`)
    -   `"Class starts at 10 AM and ends at 1 PM."`
-   The **regular expression** `\d+ [AP]M` can!

```{r}
my_string = "Class starts at 10 AM and ends at 1 PM."
my_regex = "\\d+ [AP]M"

# The escaped string "\\d" results in the regex \d
print(my_regex)
writeLines(my_regex)

# View matches for our regular expression
str_view_all(string = my_string, pattern = my_regex)
```

-   How the regular expression `\d+ [AP]M` works:
    -   `\d+` matches 1 or more digits in a row
        -   `\d` means match all numeric digits (i.e., `0`-`9`)
        -   `+` means match 1 or more of
    -   matches a literal space
    -   `[AP]M` matches either `AM` or `PM`
        -   `[AP]` means match either an `A` or `P` at that position
        -   `M` means match a literal `M`

## Some common regular expression patterns include (not inclusive):

-   Character classes
-   Quantifiers
-   Anchors\
-   Sets and ranges
-   Groups and backreferences

*Credit: [DaveChild](https://cheatography.com/davechild/cheat-sheets/regular-expressions/) Regular Expression Cheat Sheet*

### Character classes {.smaller}

| STRING  | REGEX | MATCHES                |
|---------|-------|------------------------|
| `"\\d"` | `\d`  | any digit              |
| `"\\D"` | `\D`  | any non-digit          |
| `"\\s"` | `\s`  | any whitespace         |
| `"\\S"` | `\S`  | any non-whitespace     |
| `"\\w"` | `\w`  | any word character     |
| `"\\W"` | `\W`  | any non-word character |

*Credit: [Working with strings in stringr](https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf) Cheat sheet*

-   There are certain **character classes** in regular expression that have special meaning. For example:

    -   `\d` is used to match any digit (i.e., *number*)
    -   `\s` is used to match any whitespace (i.e., *space, tab, or newline character*)
    -   `\w` is used to match any word character (i.e., *alphanumeric character or underscore*)

-   "But wait... there's more! Before a regex is interpreted as a regular expression, it is also interpreted by R as a string. And backslash is used to escape there as well. So, in the end, you need to preprend two backslashes..."

-   *Credit: [Escaping sequences](https://stat545.com/character-vectors.html#escaping) from Stat 545*

-   This means in R, when we want to use regular expression patterns `"\d"`,`"\s"`, `"\w"`, etc. to match to strings, we must write out the regex patterns as `"\\d"`,`"\\s"`, `"\\w"`, etc.

### Using `\d` & `\D` to match digits & non-digits

-   Goal: write a regular expression pattern that matches to any digit in the string `p12_df$text[119]`
-   We can use `\d` to match all instances of a digit (i.e., *number*):

```{r}
# Match any instances of a digit
str_view_all(string = p12_df$text[119], pattern = "\\d")
```

### KEY POINT WITH REGEX

-   Our regular expression is the value we specify for the `pattern` argument above; this is our "regex object"
-   We want our regex object to include the regular expression `\d`, which matches to any digit
-   We specify our regex object as `"\\d"` rather than `"\d"`

### Use regular expression `\D` to match all instances of a non-digit character:

```{r}
# Match any instances of a non-digit
str_view_all(string = p12_df$text[119], pattern = "\\D")
```

**Match to all instances of a digit followed by a non-digit character:**

```{r}
str_view_all(string = p12_df$text[119], pattern = "\\d\\D")
```

### Using `\s` & `\S` to match whitespace & non-whitespace

We can use `\s` to match all instances of a whitespace (i.e., *space, tab, or newline character*):

```{r}
# Match any instances of a whitespace
str_view_all(
  string = p12_df$text[119]
  , pattern = "\\s"
  )
```

We can use `\S` to match all instances of a non-whitespace character:

```{r}
# Match any instances of a non-whitespace
str_view_all(
  string = p12_df$text[119]
  , pattern = "\\S"
  )
```

### Using `\w` & `\W` to match words & non-words

We can use `\w` to match all instances of a word character (i.e., *alphanumeric character or underscore*):

```{r}
# Match any instances of a word character
str_view_all(
  string = p12_df$text[119]
  , pattern = "\\w"
  )
```

We can use `\W` to match all instances of a non-word character:

```{r}
# Match any instances of a non-word character
str_view_all(
  string = p12_df$text[119]
  , pattern = "\\W"
  )
```

This matches all instances of 3-letter words:

```{r}
str_view_all(
  string = p12_df$text[119]
  , pattern = "\\W\\w\\w\\w\\W"
  )
```

### Wrap-Up: Character Classes {.smaller}

-   The second half of the table above shows other regular expressions involving backslashes
-   This includes special characters like `\n` and `\t`, as well as using backslash to escape characters that have special meanings in regex, like `.` or `?` (as we will soon see.
-   So to match a literal period or question mark, we need to use the regex `\.` and `\?`, or strings `"\\."` and `"\\?"` in R.

| STRING   | REGEX | MATCHES |
|----------|-------|---------|
| `"\\n"`  | `\n`  | newline |
| `"\\t"`  | `\t`  | tab     |
| `"\\\\"` | `\\`  | `\`     |
| `"\\."`  | `\.`  | `.`     |
| `"\\?"`  | `\?`  | `?`     |
| `"\\("`  | `\(`  | `(`     |
| `"\\)"`  | `\)`  | `)`     |
| `"\\{"`  | `\{`  | `{`     |
| `"\\}"`  | `\}`  | `}`     |

## Quantifiers

| Character | Description |
|:----------|:------------|
| `*`       | 0 or more   |
| `?`       | 0 or 1      |
| `+`       | 1 or more   |
| `{3}`     | Exactly 3   |
| `{3,}`    | 3 or more   |
| `{3,5}`   | 3, 4, or 5  |

-   We can use **quantifiers** to specify the amount of a certain character or expression to match.
-   The quantifier should directly follow the pattern you want to quantify.
-   For example, `s?` matches 0 or 1 `s` and `\d{4}` matches exactly 4 digits.

### Using the `*`, `?`, and `+` quantifiers

We can use `*` to match 0 or more of a pattern:

```{r}
# Matches all instances of `s` followed by 0 or more non-word character
str_view_all(string = p12_df$text[119], pattern = "s\\W*")
```

### Using the `*`, `?`, and `+` quantifiers

We can use `?` to match 0 or 1 of a pattern:

```{r}
# Matches all instances of `s` followed by 0 or 1 non-word character
str_view_all(string = p12_df$text[119], pattern = "s\\W?")
```

### Using the `*`, `?`, and `+` quantifiers

We can use `+` to match 1 or more of a pattern:

```{r}
# Matches all instances of `s` followed by 1 or more non-word character
str_view_all(string = p12_df$text[119], pattern = "s\\W+")

# Matche all twitter hashtags
  # hashtag defined as hashtag character # followed by 1 or more word characters
str_view_all(string = p12_df$text[119], pattern = "#\\w+")
```

### Using `{...}` to specify how many occurrences to match

We can use `{n}` to specify the exact number of characters or expressions to match:

```{r}
# Matches words with exactly 3 letters
str_view_all(string = p12_df$text[119], pattern = "\\s\\w{3}\\s")
```

### Using `{...}` to specify how many occurrences to match

We can use `{n,}` to specify `n` as the minimum amount to match:

```{r}
# Matches words with 3 or more letters
str_view_all(string = p12_df$text[119], pattern = "\\s\\w{3,}\\s")
```

### Using `{...}` to specify how many occurrences to match

We can use `{n,m}` to specify we want to match between `n` and `m` amount (inclusive):

```{r}
# Matches words with between 3 to 5 letters (inclusive)
str_view_all(string = p12_df$text[119], pattern = "\\s\\w{3,5}\\s")
```

## Anchors

-   We can use **anchors** to indicate which part of the string to match.
-   For example, `^` matches the start of the string, `$` matches the end of the string (*Notice how we do not need to escape these characters*).
-   `\b` can be used to help detect word boundaries, and `\B` can be used to help match characters within a word.

| String  | Character | Description                                             |
|:--------|:----------|:--------------------------------------------------------|
| `"^"`   | `^`       | Start of string, or start of line in multi-line pattern |
| `"$"`   | `$`       | End of string, or end of line in multi-line pattern     |
| `"\\b"` | `\b`      | Word boundary                                           |
| `"\\B"` | `\B`      | Non-word boundary                                       |

### Using `^` & `$` to match start & end of string

We can use `^` to match the start of a string:

```{r}
# Matches only the quotation mark at the start of the text and not the end quote
str_view_all(string = p12_df$text[119], pattern = '^"')
```

### Using `^` & `$` to match start & end of string

We can use `$` to match the end of a string:

```{r}
# Matches only the number at the end of the text and not any other numbers
str_view_all(string = p12_df$text[119], pattern = "\\d$")
```

### Using `\b` & `\B` to match word boundary & non-word boundary

We can use `\b` to help detect word boundary:

```{r}
# Match to all word bounraries
str_view_all(string = p12_df$text[119], pattern = "\\b")
```

```{r}
# Matches words with 3 or more letters using \b
str_view_all(string = p12_df$text[119], pattern = "\\b\\w{3,}\\b")
```

Notice how this is much flexible than trying to use whitespace (`\s`) to determine word boundary:

```{r}
# Matches words with 3 or more letters using \s
str_view_all(string = p12_df$text[119], pattern = "\\s\\w{3,}\\s")
```

Regular expression `\B` matches to "non-word boundary"; what does that mean?

```{r}
str_view_all(string = p12_df$text[119], pattern = "\\B")
```

We can use `\B` to help match characters within a word:

```{r}
# Matches only the letter `s` within a word and not at the start or end
str_view_all(string = p12_df$text[119], pattern = "\\Bs\\B")
```

## Sets and ranges

| Character | Description                                      |
|:----------|:-------------------------------------------------|
| `.`       | Match any character except newline (`\n`)        |
| `a|b`     | Match `a` or `b`                                 |
| `[abc]`   | Match either `a`, `b`, or `c`                    |
| `[^abc]`  | Match anything except `a`, `b`, or `c`           |
| `[a-z]`   | Match range of lowercase letters from `a` to `z` |
| `[A-Z]`   | Match range of uppercase letters from `A` to `Z` |
| `[0-9]`   | Match range of numbers from `0` to `9`           |

-   The table lists some more ways regular expression offers us flexibility and option in what we want to match.
-   The period `.` acts as a **wildcard** to match any character except newline.
-   The vertical bar `|` is similar to an **OR** operator. Square brackets `[...]` can be used to specify a set or range of characters to match (or not to match).

### Using `.` as a wildcard

We can use `.` to match any character except newline (`\n`):

```{r}
# Matches any character except newline
str_view_all(string = p12_df$text[119], pattern = ".")
```

We can confirm there is a newline in the tweet above by using `writeLines()` or `print()`:

```{r}
writeLines(p12_df$text[119])

print(p12_df$text[119])
```

### Using `|` as an OR operator

We can use `|` to match either one of multiple patterns:

```{r}
# Matches `research`, `fight`, or `labs`
str_view_all(string = p12_df$text[119], pattern = "research|fight|labs")

# Matches hashtags or handles
str_view_all(string = p12_df$text[119], pattern = "@\\w+|#\\w+")
```

## #Using `[...]` to match (or not match) a set or range of characters

We can use `[...]` to match any set of characters:

```{r}
# Matches hashtags or handles
str_view_all(string = p12_df$text[119], pattern = "[@#]\\w+")

# Matches any 2 consecutive vowels
str_view_all(string = p12_df$text[119], pattern = "[aeiouAEIOU]{2}")
```

We can also use `[...]` to match any range of alpha or numeric characters:

```{r}
# Matches only lowercase x through z or uppercase A through C
str_view_all(string = p12_df$text[119], pattern = "[x-zA-C]")

# Matches only numbers 1 through 4 or the pound sign
str_view_all(string = p12_df$text[119], pattern = "[1-4#]")
```

We can use `[^...]` to indicate we do not want to match the provided set or range of characters:

```{r}
# Matches any vowels
str_view_all(string = p12_df$text[119], pattern = "[aeiouAEIOU]")

# Matches anything except vowels
str_view_all(string = p12_df$text[119], pattern = "[^aeiouAEIOU]")

# Matches anything that's not uppercase letters
str_view_all(string = p12_df$text[119], pattern = "[^A-Z]+")
```

Notice that `[...]` only matches a single character (see second to last example above). We need to use quantifiers if we want to match a stretch of characters (see last example above).

# Dates and times

> "Date-time data can be frustrating to work with in R. R commands for date-times are generally unintuitive and change depending on the type of date-time object being used. Moreover, the methods we use with date-times must be robust to time zones, leap days, daylight savings times, and other time related quirks, and R lacks these capabilities in some situations. Lubridate makes it easier to do the things R does with date-times and possible to do the things R does not."

*Credit: `lubridate`[documentation](https://lubridate.tidyverse.org/)*

How are dates and times stored in R? (From [Dates and Times in R](https://www.stat.berkeley.edu/~s133/dates.html))

-   The `Date` class is used for storing dates
    -   "Internally, `Date` objects are stored as the number of days since January 1, 1970, using negative numbers for earlier dates. The `as.numeric()` function can be used to convert a `Date` object to its internal form."
-   POSIX classes can be used for storing date plus times
    -   "The `POSIXct` class stores date/time values as the number of seconds since January 1, 1970"
    -   "The `POSIXlt` class stores date/time values as a list of components (hour, min, sec, mon, etc.) making it easy to extract these parts"
-   There is no native R class for storing only time

**Why use date/time objects?**

-   Using date/time objects makes it easier to fetch or modify various date/time components (e.g., year, month, day, day of the week)
    -   Compared to if the date/time is just stored in a string, these components are not as readily accessible and need to be parsed
-   You can perform certain arithmetics with date/time objects (e.g., find the "difference" between date/time points)

## Creating date/time objects

Functions that create date/time objects **by parsing character or numeric input**:

-   Create `Date` object: `ymd()`, `ydm()`, `mdy()`, `myd()`, `dmy()`, `dym()`
    -   `y` stands for year, `m` stands for month, `d` stands for day
    -   Select the function that represents the order in which your date input is formatted, and the function will be able to parse your input and create a `Date` object

### Creating POSIXct objects

-   Create `POSIXct` object: `ymd_h()`, `ymd_hm()`, `ymd_hms()`, etc.
    -   `h` stands for hour, `m` stands for minute, `s` stands for second
    -   For any of the previous 6 date functions, you can append `h`, `hm`, or `hms` if you want to provide additional time information in order to create a `POSIXct` object
    -   To force a `POSIXct` object without providing any time information, you can just provide a timezone (using `tz`) to one of the date functions and it will assume midnight as the time
    -   You can use `Sys.timezone()` to get the timezone for your location

### Creating `Date` object from character or numeric input

The `lubridate` functions are flexible and can parse dates in various formats:

```{r}
d <- mdy("1/1/2020"); d

d <- mdy("1-1-2020"); d

d <- mdy("Jan. 1, 2020"); d

d <- ymd(20200101); d
```

### Creating `Date` object from character or numeric input

Investigate the `Date` object:

```{r}
class(d)
typeof(d)

# Number of days since January 1, 1970
as.numeric(d)
```

### Creating `POSIXct` object from character or numeric input

The `lubridate` functions are flexible and can parse AM/PM in various formats:

```{r}
dt <- mdy_h("12/31/2019 11pm"); dt

dt <- mdy_hm("12/31/2019 11:59 pm"); dt

dt <- mdy_hms("12/31/2019 11:59:59 PM"); dt

dt <- ymd_hms(20191231235959); dt
```

Investigate the `POSIXct` object:

```{r}
class(dt)
typeof(dt)

# Number of seconds since January 1, 1970
as.numeric(dt)
```

We can also create a `POSIXct` object from a date function by providing a timezone. The time would default to midnight:

```{r}
dt <- mdy("1/1/2020", tz = "UTC")
dt

# Number of seconds since January 1, 1970
as.numeric(dt)  # Note that this is indeed 1 sec after the previous example
```

### Creating `Date` objects from dataframe column

Using the `p12_datetime_df` we created earlier, we can create `Date` objects from the `date_chr` column:

```{r}
# Use `ymd()` to parse the string stored in the `date_chr` column
p12_datetime_df %>% select(created_at, dt_chr, date_chr) %>%
  mutate(date_ymd = ymd(date_chr))
```

### Creating `POSIXct` objects from dataframe column

Using the `p12_datetime_df` we created earlier, we can recreate the `created_at` column (class `POSIXct`) from the `dt_chr` column (class `character`):

```{r}
# Use `ymd_hms()` to parse the string stored in the `dt_chr` column
p12_datetime_df %>% select(created_at, dt_chr) %>%
  mutate(datetime_ymd_hms = ymd_hms(dt_chr))
```

### Creating date/time objects from individual components

Functions that create date/time objects **from various date/time components**:

-   Create `Date` object: `make_date()`
    -   Syntax and default values: `make_date(year = 1970L, month = 1L, day = 1L)`
    -   All inputs are coerced to integer
-   Create `POSIXct` object: `make_datetime()`
    -   Syntax and default values: `make_datetime(year = 1970L, month = 1L, day = 1L, hour = 0L, min = 0L, sec = 0, tz = "UTC")`

There are various ways to pass in the inputs to create the same `Date` object:

```{r}
d <- make_date(2020, 1, 1); d
# Characters can be coerced to integers
d <- make_date("2020", "01", "01"); d
# Remember that the default values for month and day would be 1L
d <- make_date(2020); d
```

### Creating `POSIXct` object from individual components

```{r}
# Inputs should be numeric
d <- make_datetime(2019, 12, 31, 23, 59, 59)
d
```

### Creating `Date` objects from dataframe columns

Using the `p12_datetime_df` we created earlier, we can create `Date` objects from the various date component columns:

```{r}
# Use `make_date()` to create a `Date` object from the `yr_chr`, `mth_chr`, `day_chr` fields
p12_datetime_df %>% select(created_at, dt_chr, yr_chr, mth_chr, day_chr) %>%
  mutate(date_make_date = make_date(year = yr_chr, month = mth_chr, day = day_chr))
```

### Creating `POSIXct` objects from dataframe columns

Using the `p12_datetime_df` we created earlier, we can recreate the `created_at` column (class `POSIXct`) from the various date and time component columns (class `character`):

```{r}
# Use `make_datetime()` to create a `POSIXct` object from the `yr_chr`, `mth_chr`, `day_chr`, `hr_chr`, `min_chr`, `sec_chr` fields
# Convert inputs to integers first
p12_datetime_df %>%
  mutate(datetime_make_datetime = make_datetime(
    as.integer(yr_chr), as.integer(mth_chr), as.integer(day_chr), 
    as.integer(hr_chr), as.integer(min_chr), as.integer(sec_chr)
  )) %>%
  select(datetime_make_datetime, yr_chr, mth_chr, day_chr, hr_chr, min_chr, sec_chr)
```

## Date/time object components

Storing data using date/time objects makes it easier to **get and set** the various date/time components.

Basic accessor functions:

-   `date()`: Date component

-   `year()`: Year

-   `month()`: Month

-   `day()`: Day

-   `hour()`: Hour

-   `minute()`: Minute

-   `second()`: Second

-   `week()`: Week of the year

-   `wday()`: Day of the week (`1` for Sunday to `7` for Saturday)

-   `am()`: Is it in the am? (returns `TRUE` or `FALSE`)

-   `pm()`: Is it in the pm? (returns `TRUE` or `FALSE`)

-   To **get** a date/time component, you can simply pass a date/time object to the function

    -   Syntax: `accessor_function(<date/time_object>)`

-   To **set** a date/time component, you can assign into the accessor function to change the component

    -   Syntax: `accessor_function(<date/time_object>) <- "new_component"`
    -   Note that `am()` and `pm()` can't be set. Modify the time components instead.

```{r}
# Create datetime for New Year's Eve
dt <- make_datetime(2019, 12, 31, 23, 59, 59)
dt
dt %>% class()

date(dt) # Get date
hour(dt) # Get hour
pm(dt)   # Is it pm?
wday(dt) # Day of the week (3 = Tuesday)
year(dt) # Get year
```

## Setting date/time components

```{r}
week(dt) # Get week of year
# Set week of year (move back 1 week)
week(dt) <- week(dt) - 1
dt
day(dt) <- 25 # Set day to Christmas Day
dt
```

## Getting date/time components from dataframe column

Using the `p12_datetime_df` we created earlier, we can isolate the various date/time components from the `POSIXct` object in the `created_at` column:

```{r}
# The extracted date/time components will be of numeric type
p12_datetime_df %>% select(created_at) %>%
  mutate(
    yr_num = year(created_at),
    mth_num = month(created_at),
    day_num = day(created_at),
    hr_num = hour(created_at),
    min_num = minute(created_at),
    sec_num = second(created_at),
    ampm = ifelse(am(created_at), 'AM', 'PM')  # am()/pm() returns TRUE/FALSE
  )
```

## Time spans {.smaller}

3 ways to represent time spans (From [lubridate cheatsheet](https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf))

-   **Intervals** represent specific intervals of the timeline, bounded by start and end date-times
    -   Example: People with birthdays between the **interval** October 23 to November 22 are Scorpios
-   **Periods** track changes in clock times, which ignore time line irregularities
    -   Example: Daylight savings time ends at the beginning of November and we gain an hour - this extra hour is *ignored* when determining the **period** between October 23 to November 22
-   **Durations** track the passage of physical time, which deviates from clock time when irregularities occur
    -   Example: Daylight savings time ends at the beginning of November and we gain an hour - this extra hour is *added* when determining the **duration** between October 23 to November 22

Using the `lubridate` package for time spans:

-   **Interval**
    -   Create an interval using `interval()` or `%--%`
        -   Syntax: `interval(<date/time_object1>, <date/time_object2>)` or `<date/time_object1> %--% <date/time_object2>`

### Time spans using `lubridate`: Periods

-   "Periods are time spans but don't have a fixed length in seconds, instead they work with '*human*' times, like days and months." (From [R for Data Science](https://r4ds.had.co.nz/dates-and-times.html#periods))
-   Create periods using functions whose name is the time unit pluralized (e.g., `years()`, `months()`, `weeks()`, `days()`, `hours()`, `minutes()`, `seconds()`)
-   You can add and subtract periods
-   You can also use `as.period()` to get period of an interval

```{r}
days(1)
```

### Time spans using `lubridate`: Durations

-   Durations keep track of the physical amount of time elapsed, so it is "stored as seconds, the only time unit with a consistent length" (From [lubridate cheatsheet](https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf))

-   Create durations using functions whose name is the time unit prefixed with a `d` (e.g., `dyears()`, `dweeks()`, `ddays()`, `dhours()`, `dminutes()`, `dseconds()`)

-   Example: `ddays(1)` creates a duration of `86400s`, using the standard conversion of `60` seconds in an minute, `60` minutes in an hour, and `24` hours in a day:

```{r}
ddays(1)
```

Notice that the output says this is equivalent to *approximately* `1` day, since it acknowledges that not all days have `24` hours.

In the case of daylight savings, one particular day may have `25` hours, so the duration of that day should be represented as:

```{r}
ddays(1) + dhours(1)
```

-   You can add and subract durations
-   You can also use `as.duration()` to get duration of an interval

## Working with interval {.smaller}

```{r}
# Use `Sys.timezone()` to get timezone for your location (time is midnight by default)
scorpio_start <- ymd("2019-10-23", tz = Sys.timezone())
scorpio_end <- ymd("2019-11-22", tz = Sys.timezone())

scorpio_start
# These datetime objects have class `POSIXct`
class(scorpio_start)

# Create interval for the datetimes
scorpio_interval <- scorpio_start %--% scorpio_end  # or `interval(scorpio_start, scorpio_end)`
scorpio_interval <- interval(scorpio_start, scorpio_end)
scorpio_interval

# The object has class `Interval`
class(scorpio_interval)
as.numeric(scorpio_interval)
```

## Working with period

If we use `as.period()` to get the period of `scorpio_interval`, we see that it is a period of `30` days. We do not worry about the extra `1` hour gained due to daylight savings ending:

```{r}
# Period is 30 days
scorpio_period <- as.period(scorpio_interval)
scorpio_period

# The object has class `Period`
class(scorpio_period)
```

Because periods work with "human" times like days, it is more intuitive. For example, if we add a period of `30` days to the `scorpio_start` datetime object, we get the expected end datetime that is `30` days later:

```{r}
# Start datetime for Scorpio birthdays (time is midnight)
scorpio_start

# After adding 30 day period, we get the expected end datetime (time is midnight)
scorpio_start + days(30)
```

## Working with duration

If we use `as.duration()` to get the duration of `scorpio_interval`, we see that it is a duration of `2595600` seconds. It takes into account the extra `1` hour gained due to daylight savings ending:

```{r}
# Duration is 2595600 seconds, which is equivalent to 30 24-hr days + 1 additional hour
scorpio_duration <- as.duration(scorpio_interval)
scorpio_duration

# The object has class `Duration`
class(scorpio_duration)

# Using the standard 60s/min, 60min/hr, 24hr/day conversion,
# confirm duration is slightly more than 30 "standard" (ie. 24-hr) days
2595600 / (60 * 60 * 24)

# Specifically, it is 30 days + 1 hour, if we define a day to have 24 hours
seconds_to_period(scorpio_duration)
```

Because durations work with physical time, when we add a duration of `30` days to the `scorpio_start` datetime object, we do not get the end datetime we'd expect:

```{r}
# Start datetime for Scorpio birthdays (time is midnight)
scorpio_start

# After adding 30 day duration, we do not get the expected end datetime
# `ddays(30)` adds the number of seconds in 30 standard 24-hr days, but one of the days has 25 hours
scorpio_start + ddays(30)

# We need to add the additional 1 hour of physical time that elapsed during this time span
scorpio_start + ddays(30) + dhours(1)
```
