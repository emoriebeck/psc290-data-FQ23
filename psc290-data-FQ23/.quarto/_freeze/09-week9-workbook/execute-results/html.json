{
  "hash": "157c07aae411047ac6ba275cea54c93d",
  "result": {
    "markdown": "---\ntitle: \"Week 9 Workbook\"\nauthor: \"Emorie D Beck\"\nformat: \n  html:\n    code-tools: true\n    code-copy: true\n    code-line-numbers: true\n    code-link: true\n    theme: united\n    highlight-style: tango\n    df-print: paged\n    code-fold: show\n    toc: true\n    toc-float: true\n    self-contained: true\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Week 9 - Git & Parallelization\n\n\n::: {.cell}\n\n```{.r .cell-code}\npkg <- c(\"knitr\", \"psych\", \"palmerpenguins\", \"lavaan\", \"future\", \"plyr\", \"tidyverse\", \"furrr\")\npkg <- pkg[!pkg %in% rownames(installed.packages())]\nif(length(pkg) > 0) map(pkg, install.packages)\n\nlibrary(knitr)\nlibrary(psych)\nlibrary(lavaan)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is lavaan 0.6-15\nlavaan is FREE software! Please report any bugs.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'lavaan'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:psych':\n\n    cor2cov\n```\n:::\n\n```{.r .cell-code}\nlibrary(future)\nlibrary(plyr)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.4.2     ✔ purrr   1.0.2\n✔ tibble  3.2.1     ✔ dplyr   1.1.3\n✔ tidyr   1.2.1     ✔ stringr 1.5.0\n✔ readr   2.1.2     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ ggplot2::%+%()     masks psych::%+%()\n✖ ggplot2::alpha()   masks psych::alpha()\n✖ dplyr::arrange()   masks plyr::arrange()\n✖ purrr::compact()   masks plyr::compact()\n✖ dplyr::count()     masks plyr::count()\n✖ dplyr::desc()      masks plyr::desc()\n✖ dplyr::failwith()  masks plyr::failwith()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::id()        masks plyr::id()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::mutate()    masks plyr::mutate()\n✖ dplyr::rename()    masks plyr::rename()\n✖ dplyr::summarise() masks plyr::summarise()\n✖ dplyr::summarize() masks plyr::summarize()\n```\n:::\n\n```{.r .cell-code}\nlibrary(furrr) # note loading this last ONLY because it depends on tidyverse and will not mask it\n```\n:::\n\n\n\n\n# Outline\n\n1.  Questions on Homework\n2.  Git/GitHub\n3.  Parallelization using `future`\n4.  `furrr`\n\n## What and why use Git and GitHub?\n\n[Video](https://www.dropbox.com/s/r4gij79tw8dx1zv/doyle_why_code_git.mp4?dl=0) from Will Doyle, Professor at Vanderbilt University\n\n## What is **version control**?\n\n-   [Version control](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control) is a \"system that records changes to a file or set of files over time so that you can recall specific versions later\"\n-   Keeps records of changes, who made changes, and when those changes were made\n-   You or collaborators take \"snapshots\" of a document at a particular point in time. Later on, you can recover any previous snapshot of the document.\n\n## How version control works:\n\n-   Imagine you write a simple text file document that gives a recipe for yummy chocolate chip cookies and you save it as `cookies.txt`\n-   Later on, you make changes to `cookies.txt` (e.g., add alternative baking time for people who like \"soft and chewy\" cookies)\n-   When using version control to make these changes, you don't save entirely new version of `cookies.txt`; rather, you save the changes made relative to the previous version of `cookies.txt`\n\n## Why use Git and GitHub?\n\nWhy use version control when you can just save new version of document?\n\n1.  Saving entirely new document each time a change is made is very inefficient from a memory/storage perspective\n    -   When you save a new version of a document, much of the contents are the same as the previous version\n    -   Inefficient to devote space to saving multiple copies of the same content\n2.  When document undergoes lots of changes -- especially a document that multiple people are collaborating on -- it's hard to keep track of so many different documents. Easy to end up with a situation like this:\n\n## Why use Git and GitHub?\n\n[![](https://pbs.twimg.com/media/B9HgQmDIEAALfb4.jpg)](http://www.phdcomics.com/comics/archive.php?comicid=1531)\n\n*Credit: Jorge Chan (and also, lifted this example from Benjamin Skinner's [intro to Git/GitHub lecture](https://edquant.github.io/past/2020/spring/edh7916/lessons/intro.html))*\n\n## What is **Git**? (from git [website](https://git-scm.com/)) {.smaller}\n\n> \"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency\"\n\n-   Git is a particular version control software created by *The Git Project*\n    -   [Git is free and open source software](https://git-scm.com/about/free-and-open-source), meaning that anyone can use, share, and modify the software\n    -   Although Microsoft owns Github (described) below, it thankfully does not own Git!\n-   Git can be used by:\n    -   An individual/standalone developer\n    -   For collaborative projects, where multiple people collaborate on each file\n\n## What is a **Git repository**?\n\n-   A Git repository is any project managed in Git\n-   From [Git Handbook](https://guides.github.com/introduction/git-handbook/) by github.com:\n    -   A repository \"encompasses the entire collection of files and folders associated with a project, along with each file's revision history\"\n    -   Because git is a **distributed** version control system, \"repositories are self-contained units and anyone who owns a copy of the repository can access the entire codebase and its history\"\n-   This course is a Git repository ([PSC290 FQ23 repository](https://github.com/emoriebeck/psc290-data-FQ23/))\n\n## What is a **Git repository**?\n\n-   Local vs. remote git repository:\n    -   **Local** git repository: git repository for a project stored on your machine\n    -   **Remote** git repository: git repository for a project stored on the internet\n-   Typically, a local git repository is connected to a remote git repository\n    -   You can make changes to local repository on your machine and then **push** those changes to the remote repository\n    -   Other collaborators can also make changes to their local repository, push them to the remote repository, and then you can **pull** these changes into your local repository\n\n## Private vs. public repositories\n\n-   Public repositories: anyone can access the repository\n    -   e.g., [PSC290 FQ23](https://github.com/emoriebeck/psc290-data-FQ23/), the git repository we created to develop the Rclass2 course is a public repository because we want the public to benefit from this course\n-   Private repositories: only those who have been granted access by a repository \"administrator\" can access the repository\n\n## What is **GitHub**?\n\n-   [GitHub](https://github.com/) is the industry standard hosting site/service for Git repositories\n    -   Hosting services allow people/organizations to store files on the internet and make those files available to others\n-   Microsoft acquired Github in 2018 for \\$7.5 billion\n-   Github is where **remote** git repositories live\n\n## Git Workflow {.smaller}\n\nVersion control systems that save **differences**: - Prior to Git, \"centralized version control systems\" were the industry standard version control systems (From [Getting Started - About Version Control](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)) - In these systems, a central server stored all the versions of a file and \"clients\" (e.g., a programmer working on a project on their local computer) could \"check out\" files from the central server - These centralized version control systems stored multiple versions of a file as \"differences\" - The below figure portrays version control systems that store data as changes relative to the base version of each file:\n\n## Git Workflow\n\n![](https://git-scm.com/book/en/v2/images/deltas.png)\n\n*Credit: [Getting Started - What is Git](https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F)*\n\n## Git Workflow\n\nGit stores data as **snapshots** rather than *differences*:\n\n-   Git doesn't think of data as differences relative to the base version of each file\n-   Rather, Git thinks of data as \"a series of snapshots of a miniature filesystem\" or, said differently, a series of snapshots of all files in the repository\n-   For files that have changed:\n    -   the \"commit\" will save lines that you have changed or added \\[like \"differences\"\\]\n    -   lines that have not changed will not be re-saved; because these lines have been saved in previous commit(s) that are linked to the current commit\n\n## Git Workflow\n\n-   The below figure portrays storing data as a stream of snapshots over time:\n\n![](https://git-scm.com/book/en/v2/images/snapshots.png)\n\n*Credit: [Getting Started - What is Git](https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F)*\n\n## What is a **commit**?\n\n-   A **commit** is a snapshot of all files in the repository at a particular time\n-   Example: Imagine you are working on a project (repository) that contains a dozen files\n    -   You change two files and make a commit\n    -   Git takes a snapshot of the full repository (all files)\n    -   Content that remains unchanged relative to the previous commit is stored vis-a-vis a link to the previous commit\n\n## Three components of a Git project\n\n<center>![](https://miro.medium.com/max/686/1*diRLm1S5hkVoh5qeArND0Q.png){width=\"500px\"}</center>\n\n*Credit: Lucas Maurer, [medium.com](https://medium.com/@lucasmaurer/git-gud-the-working-tree-staging-area-and-local-repo-a1f0f4822018)*\n\n## Three components of a Git project {.smaller}\n\n1.  **Local working directory** (also called \"working tree\")\n    -   This is the area where all your work happens! You are writing Rmd files, debugging R scripts, adding and deleting files\n    -   These changes are made on your local machine!\n2.  **Git index/staging area** (`git add <filename(s)>` command)\n    -   The staging area is the area between your *local working directory* and the *repository*, where you list changes you have made in the local working directory that you would like to commit to the repository\n3.  **Repository** (`git commit` command)\n    -   This is the actual repository where Git permanently stores the changes you've made in the local working directory and added to the staging area\n\n## Git Workflow {.smaller}\n\nHypothetical work flow to `cookies.txt`:\n\n-   ***Add*** changes from *local working directory* to *staging area*\n-   ***Commit*** changes from *staging area* to *repository*\n-   Each **commit** to the repository is a different version of the file that represents a snapshot of the file at a particular time\n-   Commits are made to **branches** in the repo\n    -   By default, a git repository comes with one main branch (typically called **main**)\n    -   But we can also create other branches (discussed more later)\n\n## Git Workflow\n\n-   **Local** vs. **remote** repository\n    -   When you add a change to the *staging area* and then commit the change to your *repository*, this changes your *local repository* (i.e., on your computer) rather than your *remote repository* (i.e., on GitHub)\n-   If you want to change the *remote repository* (typically named **origin**), you must ***push*** the change from your *local repository* to your *remote repository*\n-   As seen below, each circle represents a **commit**. After you make commits on a branch in your *local repository* (i.e., **main**), you need to ***push*** them in order for the corresponding branch on the *remote repository* (i.e., **origin/main**) to be up-to-date with your changes.\n\n## GitHub Desktop\n\n-   Practically, in this class, I'm going to show you how to use GitHub Desktop, which is a GUI (graphical user interface) for managing git repositories and commits.\n-   Relative to the command line, using a GUI means you're ready to be \"up and running with git immediately and don't have to learn bash syntax\n\n## Exercise: Setting Up GitHub Desktop\n\n-   Rather than stepping through in the slides, I'm going to have each of you navigate to this link: <https://docs.github.com/en/desktop/overview/getting-started-with-github-desktop>.\n-   Follow it to the end of Part 1 (Installing and authenticating) and then pause\n-   Raise your hand if you need help\n-   If you don't already have a GitHub account and don't want to set one up, work with someone around you\n\n## The basic workflow {.smaller}\n\n### First time\n\n1.  **Clone** the repository that you want to work on from GitHub onto your local machine\n2.  Work on the files/scripts, e.g., `penguins.R`\n3.  Next, you will **commit** your changes and include an informative message, e.g. \"Plot distribution of flipper length\"\n4.  Then, you will **push** your changes to the remote repository\n\n### Subsequent times\n\n1.  **Pull** any changes from the remote repository that your collaborators might have made\n2.  Repeat steps 2-4 above\n\n## Cloning\n\n\n```{=html}\n<div>\n  <center>\n  <video width=\"70%\" height=\"60%\" controls muted>\n  <source src=\"https://github.com/walice/git-tutorial/raw/master/assets/cloning.mp4\" type=\"video/mp4\">\n  </video>\n  </center>\n</div>\n```\n\n## Exercise\n\nThe repo [walice/git-tutorial](https://github.com/walice/git-tutorial) contains the `penguins.R` script, which works with data from the `palmerpenguins` library.\n\n*Credit: [5 Minute Git](https://github.com/walice/git-tutorial)*\n\n## Work on the files\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = bill_length_mm, y = bill_depth_mm, color = species)) + \n  geom_point() +\n  labs(title = \"Penguin bills\") + \n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](09-week9-workbook_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Staging your files\n\n![Stage your file](https://raw.githubusercontent.com/walice/git-tutorial/master/assets/staged-file.png)\n\n## Commit your changes\n\n\n```{=html}\n<div>\n  <center>\n  <video width=\"70%\" height=\"60%\" controls muted>\n  <source src=\"https://github.com/walice/git-tutorial/raw/master/assets/committing.mp4\" type=\"video/mp4\">\n  </video>\n  </center>\n</div>\n```\n\n## Commit your changes\n\n#### Use an informative commit message\n\n-   (Not great) \"Analyze data\" 😞\n-   (Better) \"Estimate logistic regression\" 🎉\n\n#### Have a consistent style\n\n-   Start with an action verb\n-   Capitalize message\n\n#### Commits are *cheap*, use them often!\n\n## Push your changes\n\n\n```{=html}\n<div>\n  <center>\n  <video width=\"70%\" height=\"60%\" controls muted>\n  <source src=\"https://github.com/walice/git-tutorial/raw/master/assets/pushing.mp4\" type=\"video/mp4\">\n  </video>\n  </center>\n</div>\n```\n\n## Why Use Git/Hub\n\n-   Direct link to the Open Science Framework via \"Add-ons,\" so you don't have to maintain / copy files multiple places\n-   Easy collaboration with better tools for dealing with conflicts due to remotes\n-   Easy to restore back to an earlier \"snapshot\"\n-   Can directly link to files, data, etc.\n    -   by default, the links will be to the \"main\"\n    -   swap this out for \"raw\" and it will link to the raw file, which will open a raw text page for text files (including .csv) or download (including .docx, .pdf, etc.)\n\n# Parallel Processing in R\n\n## Guarding your resources\n\n-   Computers have finite resources\n-   A common source of issues in R is a cluttered environment\n    -   Objects you aren't using\n    -   Objects unrelated to whatever you're working on, etc.\n\n## Cleaning up your environment {.smaller}\n\n-   The best ways to avoid issues due to a cluttered environment are:\n    -   Always start from a blank environment\n    -   Write scripts systematically. You shouldn't be skipping around and should be careful about overwriting objects\n    -   Save object(s), not your whole workspace to allow you to bring back in things you were working on previously\n    -   Use object names with clear patterns to allow you clean up your environment\n        -   `rm(list=ls()[grepl(\"RQ1\", ls()])`\n        -   `rm(list=ls()[!ls() %in% c(\"df1\", \"df2\")])`\n    -   Occasionally call `gc()` after cleaning up your environment\n\n## Guarding your resources\n\n-   All of the above guard your **RAM**, but another cause of issues with resources is that you take full advantage of your computing power\n-   Most modern computers have 8+ physical and virtual cores and powerful graphics cards\n-   Together, these allow us to parallelize processes, which just means to do multiple different processes in parallel at the same time\n\n## Parallel Processing\n\n-   You've likely used parallel processing in R before\n-   Many packages, like `lavaan`, `lme4`, and any bootstrapping have an argument called `parallel`, with values like `TRUE`/`FALSE` or \"fork\"/\"multisession\"/\"multicore\"\n-   This just means that they are using one of many available packages / tools to speed up the estmation of whatever your function is doing\n\n## Why use `future` for parallelization? {.smaller}\n\n-   A Unifying Parallelization Framework in R for Everyone\n-   Require only minimal changes to parallelize existing R code\n-   \"Write once, Parallelize anywhere\n-   Same code regardless of operating system and parallel backend\n-   Lower the bar to get started with parallelization\n-   Fewer decisions for the developer to make\n-   Stay with your favorite coding style\n-   Worry-free: globals, packages, output, warnings, errors just work\n-   Statistically sound: Built-in parallel random number generation (RNG)\n-   Correctness and reproducibility of highest priority\n\n## Three atomic building blocks\n\nThere are three atomic building blocks that do everything we need:\n\n-   `f  <- future(expr)` : evaluates an expression via a future (non-blocking, if possible)\n-   `rs <- resolved(f)` : `TRUE` if future is resolved, otherwise FALSE (non-blocking)\n-   `v  <- value(f)` : the value of the future expression `expr` (blocking until resolved)\n\n## Example\n\nTo break down what's happening, let's use a bad function, called `slow_sum()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslow_sum <- function(x) {\n  sum <- 0\n  for (kk in seq_along(x)) {\n    sum <- sum + x[kk]\n    Sys.sleep(0.1)  # emulate 0.1 second cost per addition\n  }\n  sum\n}\n```\n:::\n\n\n*Credit: [future tutorial useR 2022](https://henrikbengtsson.github.io/future-tutorial-user2022)*\n\n## Example\n\nIf we then call, the following, it takes about 10 seconds\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:100\nv <- slow_sum(x)\nv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5050\n```\n:::\n\n```{.r .cell-code}\n#> [1] 5050\n```\n:::\n\n\nBut we could do the same in future and see that time to evaluate has been cut in half:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(future)\nplan(multisession) # evaluate futures in parallel\n\nx <- 1:100\nf <- future(slow_sum(x))\nv <- value(f)\n#> [1] 5050\n```\n:::\n\n\n## Anatomy of `future()` {.smaller}\n\nWhen we call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- future(slow_sum(x))\n```\n:::\n\n\nthen:\n\n-   a future is created, comprising:\n    -   the R expression slow_sum(x),\n    -   function slow_sum(), and\n    -   integer vector x\n-   These future components are sent to a parallel worker, which starts evaluating the R expression\n-   The `future()` function returns immediately a reference `f` to the future, and before the future evaluation is completed\n\n## Anatomy of `value()`\n\nWhen we call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- value(f)\n```\n:::\n\n\nthen:\n\n-   the future asks the worker if it's ready or not (using `resolved()` internally)\n-   if it is not ready, then it waits until it's ready (blocking)\n-   when ready, the results are collected from the worker\n-   the value of the expression is returned\n\n## Benefits of future:\n\n-   You can keep doing other things while your code runs in the background and then eventually check whether it's done using `resolved()` or `value()`\n-   You can do multiple different futures at the same time\n\n## Benefits of future:\n\nWhen we run code normally, we experience blocking, which means that the next line can't run until the previous one is done.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_head <- head(x, 50)\nx_tail <- tail(x, 50)\n\nv1 <- slow_sum(x_head)         ## ~5 secs (blocking)\nv2 <- slow_sum(x_tail)         ## ~5 secs (blocking)\nv <- v1 + v2\n```\n:::\n\n\nBut with future, we can parallelize and continue to run other things:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf1 <- future(slow_sum(x_head)) ## ~5 secs (in parallel)\nf2 <- future(slow_sum(x_tail)) ## ~5 secs (in parallel)\n\n## Do other things\nz <- sd(x)\n\nv <- value(f1) + value(f2)     ## ready after ~5 secs\n```\n:::\n\n\n## Setting up your future backend\n\nTo fully make use of future, you need to understand:\n\n-   parallel backends\n-   \"workers\"\n-   globals\\\n-   packages\n\n## Parallel backends\n\n-   There are multiple ways that you can run parallel processes in R that depend on:\n    -   your OS\n    -   whether you are running local or remote sessions\n\n1.  `plan(sequential)`: default, will block\n2.  `plan(multisession)`: parallel, no blocking\n3.  (`plan(future.batchtools::batchtools_slurm)`)\n4.  (`plan(future.callr::callr, workers = 4)`)\n5.  More to come\n\n## Workers\n\n-   Remember, `R` resources are finite\n-   As a rule of thumb, you don't want to call more resources than you have\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparallel::detectCores()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16\n```\n:::\n:::\n\n\n## Workers\n\nin `future`, workers are basically the number of cores you want to use for parallel processing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplan(multisession, workers = 8)\nnbrOfWorkers()\n#> [1] 8\n\nplan(multisession, workers = 2)\nnbrOfWorkers()\n#> [1] 2\n```\n:::\n\n\n## Workers\n\nin `future`, workers are basically the number of cores you want to use for parallel processing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplan(multisession, workers = 2)\nnbrOfWorkers()\n#> [1] 2\n\nf1 <- future(slow_sum(x_head))\nf2 <- future(slow_sum(x_tail))\nf3 <- future(slow_sum(1:200))   ## <= blocks here\n\nresolved(f1)\n#> [1] TRUE\nresolved(f2)\n#> [1] TRUE\nresolved(f3)\n#> [1] FALSE\n```\n:::\n\n\n## Globals\n\n\\-`globals` is an argument for `future()`. By default, it is set to `TRUE` - Alternatively, it could be a character vector including only those globals you want the `future()` call to have access to\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_head <- head(x, 50)\nx_tail <- tail(x, 50)\n\nplan(multisession, workers = 2)\nf1 <- future(slow_sum(x_head), globals = c(\"slow_sum\", \"x_head\"))\nf2 <- future(slow_sum(x_tail), globals = c(\"slow_sum\", \"x_head\")) ## doesn't work\n```\n:::\n\n\n## Packages\n\n-   `packages` is an argument for `future()`. By default, it is set to `NULL`\n-   Alternatively, it could be a character vector including only those packages you want to import into the parallel calls\n    -   Useful when working with package conflicts, remote clusters\n\n# `furrr`: `future` + `purrr`\n\n> The goal of furrr is to combine purrr's family of mapping functions with future's parallel processing capabilities. The result is near drop in replacements for purrr functions such as map() and map2_dbl(), which can be replaced with their furrr equivalents of future_map() and future_map2_dbl() to map in parallel.\n\n## `furrr`\n\n-   I personally use `furrr` frequently when I need to a bunch of stuff in parallel but not so much I find myself needing to reach for an HPC\n-   Why? It works just like `purrr` functions but allows me to run them in parallel!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplan(multisession, workers = 2)\n\n1:10 %>%\n  future_map(rnorm, n = 10, .options = furrr_options(seed = 123)) %>%\n  future_map_dbl(mean)\n```\n:::\n\n\n## `furrr`\n\n-   I also use `furrr` because it works just like future:\n-   `future_map(.x, .f, .options = furrr_options())`\n    -   `furrr_options()` basically takes all the same arguments a typical `future()` call would take, including globals and packages\n-   So with very little experience, you can shift an existing `purrr` workflow (or pieces of it) to parallel\n\n## Exercise\n\nAs a brief exercise, let's revisit some of the latent growth models we ran last week:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngsoep2_lavaan <- readRDS(\"week9-data.RDS\")\n```\n:::\n\n\n## Exercise {.smaller}\n\nBelow is the lavaan syntax we ran:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- '\n  W1 =~ NA*I1_2005 + lambda1*I1_2005 + lambda2*I2_2005 + lambda3*I3_2005\n  W2 =~ NA*I1_2009 + lambda1*I1_2009 + lambda2*I2_2009 + lambda3*I3_2009\n  W3 =~ NA*I1_2013 + lambda1*I1_2013 + lambda2*I2_2013 + lambda3*I3_2013\n  \n  i =~ 1*W1 + 1*W2 + 1*W3\n  s =~ -1*W1 + 0*W2 + 1*W3\n  \n  ## intercepts\n  I1_2005 ~ t1*1\n  I1_2009 ~ t2*1\n  I1_2013 ~ t3*1\n  \n  I2_2005 ~ t1*1\n  I2_2009 ~ t2*1\n  I2_2013 ~ t3*1\n  \n  I3_2005 ~ t1*1\n  I3_2009 ~ t2*1\n  I3_2013 ~ t3*1\n  \n  ## correlated residuals across time\n  I1_2005 ~~ I1_2009 + I1_2013\n  I1_2009 ~~ I1_2013\n  I2_2005 ~~ I2_2009 + I2_2013\n  I2_2009 ~~ I2_2013\n  I3_2005 ~~ I3_2009 + I3_2013\n  I3_2009 ~~ I3_2013\n  \n  ## latent variable intercepts\n  W1 ~ 0*1\n  W2 ~ 0*1\n  W3 ~ 0*1\n  \n  #model constraints for effect coding\n  ## loadings must average to 1\n  lambda1 == 3 - lambda2 - lambda3\n  ## means must average to 0\n  t1 == 0 - t2 - t3\n  '\n```\n:::\n\n\n## Exercise\n\nAnd the function we ran:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlavaan_fun <- function(d, trait){\n  m <- growth(\n    mod\n    , data = d\n    , missing = \"fiml\"\n  )\n  # saveRDS(m, file = sprintf(\"results/models/%s.RDS\", trait))\n  return(m)\n}\n```\n:::\n\n\n## Exercise\n\nBut instead of running the model using `map2()`, let's run it using `future_map2()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart <- Sys.time()\ngsoep_nested2 <- gsoep2_lavaan %>%\n  group_by(category, trait) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(m = map2(data, trait, lavaan_fun))\nend <- Sys.time()\nprint(end - start)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 6.176554 secs\n```\n:::\n\n```{.r .cell-code}\n# > Time difference of 4.413002 secs\n```\n:::\n\n\n## Exercise\n\nIn this case, we're only saving a few seconds, but in the case having many more models or models that run longer, this can HUGELY add up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart <- Sys.time()\nplan(multisession, workers = 5L)\ngsoep_nested2 <- gsoep2_lavaan %>%\n  group_by(category, trait) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(m = future_map2(data, trait, lavaan_fun))\nend <- Sys.time()\nprint(end - start)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 3.991134 secs\n```\n:::\n\n```{.r .cell-code}\n# Time difference of 2.993128 secs\n```\n:::\n\n\n## Caution: Data transfer\n\n> The goal of furrr is to combine purrr's family of mapping functions with future's parallel processing capabilities. The result is near drop in replacements for purrr functions such as map() and map2_dbl(), which can be replaced with their furrr equivalents of future_map() and future_map2_dbl() to map in parallel.\n\n-   Better alternative: don't export large objects using `furrr` but save the output to a local environment that can be loaded in later\n\n## Next Week: Review\n\n-   Next week, we'll wrap up with a one hour \"overview\" highlighting big takeaways, reminders, etc. for the course\n-   Then, everyone will have the chance to (optionally) share their favorite `R` hacks (hint: this is a good excuse / nudge to remember the bonus points you can get by submitting tidy tuesday style code)\n-   Finally, we'll have time to work on final projects\n\n# Acknowledgments\n\nResources used to create this lecture:\n\n-   https://anyone-can-cook.github.io/rclass2/\n-   https://happygitwithr.com/\n-   https://henrikbengtsson.github.io/future-tutorial-user2022\n-   https://furrr.futureverse.org/\n-   https://github.com/walice/git-tutorial/\n-   https://edquant.github.io/edh7916/lessons/intro.html\n-   https://www.codecademy.com/articles/f1-u3-git-setup\n",
    "supporting": [
      "09-week9-workbook_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}