{
  "hash": "c87a358d3a8f2712bceebf9e7deb801e",
  "result": {
    "markdown": "---\ntitle: \"Week 1 Workbook\"\nauthor: \"Emorie D Beck\"\nformat: \n  html:\n    code-tools: true\n    code-copy: true\n    code-line-numbers: true\n    code-link: true\n    theme: united\n    highlight-style: tango\n    df-print: paged\n    code-fold: show\n    toc: true\n    toc-float: true\n    self-contained: true\n    # height: 900\n    footer: \"PSC 290 - Data Cleaning and Management FQ23\"\n    logo: \"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png\"\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Week 1 - Getting Situated in R & Quarto\n\nYou can download the code for this workbook and the rendered workbook [here](https://github.com/emoriebeck/psc290-data-FQ23/raw/main/04-workshops/01-week1-intro/week1-workbook.zip).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\nlibrary(psych)\nlibrary(plyr)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nâ”€â”€ Attaching packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.2 â”€â”€\nâœ” ggplot2 3.4.2     âœ” purrr   1.0.2\nâœ” tibble  3.2.1     âœ” dplyr   1.1.3\nâœ” tidyr   1.2.1     âœ” stringr 1.5.0\nâœ” readr   2.1.2     âœ” forcats 0.5.2\nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nâœ– ggplot2::%+%()     masks psych::%+%()\nâœ– ggplot2::alpha()   masks psych::alpha()\nâœ– dplyr::arrange()   masks plyr::arrange()\nâœ– purrr::compact()   masks plyr::compact()\nâœ– dplyr::count()     masks plyr::count()\nâœ– dplyr::desc()      masks plyr::desc()\nâœ– dplyr::failwith()  masks plyr::failwith()\nâœ– dplyr::filter()    masks stats::filter()\nâœ– dplyr::id()        masks plyr::id()\nâœ– dplyr::lag()       masks stats::lag()\nâœ– dplyr::mutate()    masks plyr::mutate()\nâœ– dplyr::rename()    masks plyr::rename()\nâœ– dplyr::summarise() masks plyr::summarise()\nâœ– dplyr::summarize() masks plyr::summarize()\n```\n:::\n:::\n\n\n# Goals for Today\n\n-   Course Overview\n-   What Is a Workflow?\n-   Fundamentals of R\n-   Brief Quarto Overview\n\n# Course Overview\n\n## Course Goals & Learning Outcomes\n\nAfter successful completion of this course, you will be able to:\n\n1.  Build your own research workflow that can be ported to future projects.\n\n2.  Learn new programming skills that will help you efficiently, accurately, and deliberately clean and manage your data.\n\n3.  Create a bank of code and tools that can be used for a variety of types of research.\n\n## Course Expectations\n\n-   \\~50% of the course will be in R\n-   You will get the most from this course if you:\n    -   have your own data you can apply course content to\n    -   know how to clean clean, transform, and manage that data\n    -   today's workshop is a good litmus test for this\n\n## Course Materials\n\n-   All materials (required and optional) are free and online\n    -   Wickham & Grolemond: *R for Data Science* <https://r4ds.had.co.nz>\n    -   Wickham: *Advanced R* <http://adv-r.had.co.nz>\n    -   [Data Camp](https://www.datacamp.com/groups/shared_links/bd4b5bf66c2195741f388ca82c1b19c89b6f37754c7cfa0eb5aded5f16678360): All paid content unlocked\n\n## Assignments\n\n| **Assignment Weights** | **Percent** |\n|------------------------|-------------|\n| Class Participation    | 20%         |\n| Problem Sets           | 40%         |\n| Final Project Proposal | 10%\\*       |\n| Class Presentation     | 10%\\*       |\n| Final Project          | 20%\\*       |\n| Total                  | 100%        |\n\n### Class Participation\n\n-   There are lots of ways to participate, both in and outside class meetings\n-   Classes will be technologically hybrid\n-   The goal of this is for accessibility and to create recordings\n-   If you need to miss 2+ classes (i.e. 20+% of total class time), maybe consider taking the course in a different year\n\n### Problem Sets\n\n-   The main homework in the course are weekly problem sets\n-   The goal is to let you apply concepts from that week to your own data (or whatever data you'll focus on for the class)\n-   Problem sets will be posted on Mondays before class\n-   Due 12:01 AM each Monday (starting next Monday and not including the last day of the course)\n\n### Final Projects\n\n-   Final project replaces final exam (there are no exams)\n-   This is a bring your own data class, so the goal of the course is to apply what you're learning to your own research throughout the term\n-   Details of the final project TBD, but will generally include\n    -   Stage 1: Proposals (due 11/13/23)\n    -   Stage 2: In-class presentations (12/04/23)\n    -   Stage 3: Final project submission (Due day and time of scheduled final; which I can't access because ScheduleBuilder thinks I need a CRN for my own course and no one emails me back ðŸ™ƒ)\n\n### Extra Credit\n\n-   Participate in a <https://www.tidytuesday.com>.\n\n-   2 pt extra credit for each one you participate in (max 6 pt total).\n\n-   Can post on Twitter or just create a document with the code and output\n\n-   Submit on Canvas\n\n    -   If posting, link the post in the Canvas submission\n    -   If not posting, attach the knitted file on Canvas\n\n## Grading Scale\n\n92.5% - 100% = A; 89.5% - 92.4% = A-\\\n87.5% - 89.4% = B+; 82.5% - 87.4% = B; 79.5% - 82.4% = B-\\\n77.5% - 79.4% = C+; 72.5% - 77.4% = C; 69.5% - 72.4% = C-\\\n67.5% - 69.4% = D+; 62.5% - 67.4% = D; 59.5% - 62.4% = D-\\\n0% - 59.4% = F\n\n## Schedule\n\n-   Week 1: Intro & Basics\\\n-   Week 2: Reproducibility & `dplyr`\\\n-   Week 3: Data Quality & `tidyr`\\\n-   Week 4: Codebooks & importing data\\\n-   Week 5: Data structures & transformation\n-   Week 6: Versioning & `purrr`\\\n-   Week 7: Efficient R & parallelization\\\n-   Week 8: TBD & tables and figures in `R`\\\n-   Week 9: Odds and ends & help with projects\\\n-   Week 10: Presentations\n\n# What is a workflow?\n\n-   Dictionary definition: \"the sequence of industrial, administrative, or other processes through which a piece of work passes from initiation to completion\"\n-   Research Workflow: \"The process of conducting research from conceptualization to dissemination\"\n\n## Why Should I Care?\n\n-   Whether you like it or not, you have a workflow\n-   You have ways you go about doing a project that you maybe haven't thought too much about\n-   Issues arise when\n    1.  A workflow has *missing steps*\n    2.  Your workflow is *inconsistent* across projects\n    3.  Your workflow is *inefficient*, which can lead to mistakes\n-   A workflow is a work in progress. If it no longer serves you, let it go\n\n## How Do I Build a Workflow?\n\n-   Building a good workflow is both top-down (i.e. big steps to smaller ones) and bottom-up (i.e. necessary smaller steps make certain larger ones necessary)\n-   What?\n\n::: columns\n::: column\n**Example: New Data Collection**\\\n1. Conceptualization\\\n2. Funding acquisition\\\n3. Preregistration\\\n4. Project Building\\\n5. Data Collection\\\n6. Data Cleaning\\\n7. Data Analysis\\\n8. Writing (and rewriting)\\\n9. Submission\\\n10. Revision (and possibly crying)\\\n11. ACCEPTANCE\n:::\n\n::: column\n**Example: Secondary Data**\\\n1. Conceptualization\\\n2. Data search\\\n3. Project Building\\\n4. Data documentation\\\n5. Preregistration\\\n6. Data Cleaning\\\n7. Data Analysis\\\n8. Writing (and rewriting)\\\n9. Submission\\\n10. Revision (and possibly crying)\\\n11. ACCEPTANCE\n:::\n:::\n\n-   Workflows Are Hierarchical: Example -- Data Cleaning Steps\n\n::: columns\n::: column\n**Experimental Data**\n\n1\\. Gather all data files\\\n2. Quality checks for each file\\\n3. Load all files\\\n4. Merge all files\\\n5. Check all descriptives\\\n6. Scoring, coding, and data transformation\\\n7. Recheck all descriptives\\\n8. Correlations and visualization\\\n9. Restructure data for analyses\n:::\n\n::: column\n**Secondary Data**\n\n1\\. Gather all data files\\\n2. Load each file\\\n3. Extract variables used\\\n4. Rename variables, possibly deal with time variables\\\n4. Merge all files\\\n5. Check all descriptives\\\n6. Scoring, coding, and data transformation\\\n7. Recheck all descriptives\\\n8. Correlations and visualization\\\n9. Restructure data for analyses\n:::\n:::\n\n## Workflows: Overview of the Course\n\nIn this class, we will focus on building tools for:\n\n-   Documenting Data (both before and after collection)\\\n\n-   File management (how do I build a machine and human navigable directory)\\\n\n-   Loading data files\\\n\n-   All steps of cleaning data\\\n\n-   Restructuring Data\\\n\n-   DESCRIPTIVES DESCRIPTIVES DESCRIPTIVES\\\n\n-   Efficient Programming (plz stop copy-pasting)\n\n-   This class does not focus on modeling but rather how you get your data set up to run models (Weeks 1-5/6) AND how to extract and present data after you run them (Weeks 6/7-9)\n\n-   We will focus on classes of models in R you will most likely encounter (`lm()`, `glm()`, `lmer()`, `nlme()`, `lavaan`, `brms`)\n\n-   If you run other kinds of models, most tools we will use are portable to many packages and other object classes\n\n-   By the end of this class, my goal is that you:\\\n\n1.  Have a documented workflow for the kind of research you work on\\\n2.  Have a set of tools and skills that apply to each piece of that workflow\\\n3.  Have a skillset that will allow you to adapt and build new workflows for different kinds of research\n\n# Fundamentals of R\n\n## What is R? Why R?\n\n-   An \"open source\" programming language and software that provide collections of interrelated \"functions\"\n-   \"open source\" means that *R* is free and created by the user community. The user community can modify basic things about *R* and add new capabilities to what R can do the user community can modify R and\n-   a \"function\" is usually something that takes in some \"input,\" processes this input in some way, and creates some \"output\"\n    -   e.g., the `max()` function takes as input a collection of numbers (e.g., 3,5,6) and returns as output the number with the maximum value\n    -   e.g., the `lm()` function takes in as inputs a dataset and a statistical model you specify within the function, and returns as output the results of the regression model\n\n## Base R vs. R packages\n\n::: columns\n::: column\nBase R\n\n-   When you install R, you automatically install the [\"Base R\"](https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.html) set of functions\n-   Example of a few of the functions in in Base R:\n    -   `as.character()` function\n    -   `print()` function\n    -   `setwd()` function\n:::\n\n::: column\nR packages\n\n-   an R \"package\" (or \"library\") is a collection of (related) functions developed by the R community\n-   Examples of R packages:\n    -   `tidyverse` package for manipulating and visualizing data\n    -   `igraph` package for network analyses\n    -   `leaflet` package for mapping\n    -   `rvest` package for webscraping\n    -   `rtweet` package for streaming and downloading data from Twitter\n-   **All** R packages are free!\n:::\n:::\n\n## Why Use RStudio (Pivot)\n\n::: columns\n::: {.column width=\"60%\"}\n-   Also free\n-   Basically a GUI for R\n-   Organize files, import data, etc. with ease\n-   RMarkdown, Quarto, and more are powerful tools (they were used to create these slides!)\n-   Lots of new features and support\n:::\n\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/RStudio-Logo-Flat.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/RStudio-Logo-Flat.png)\n:::\n:::\n\n:::\n:::\n\n## Why Use the `tidyverse`\n\n::: columns\n::: {.column width=\"70%\"}\n-   Maintained by RStudio (Pivot)\n-   No one should have to use a for loop to change data from long to wide\n-   Tons of integrated tools for data cleaning, manipulation, transformation, and visualization\n-   Even increasing support for modeling (e.g., `tidymodels`)\n:::\n\n::: {.column width=\"30%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/tidyverse.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/tidyverse.png){fig-align='center'}\n:::\n:::\n\n:::\n:::\n\n::: {layout=\"[[1,1, 1, 1, 1, 1], [1,1, 1, 1, 1,1]]\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/tidyr.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/tidyr.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/stringr.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/stringr.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/shiny.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/shiny.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/rmarkdown.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/rmarkdown.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/quarto.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/quarto.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/knitr.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/knitr.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/ggplot2.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/ggplot2.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/forcats.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/forcats.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/dplyr.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/dplyr.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/broom.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/broom.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/tibble.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/tibble.png){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/purrr.png\")\n```\n\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/purrr.png){fig-align='center'}\n:::\n:::\n\n:::\n\n## Why use Quarto\n\n[Quarto](https://quarto.org/)\n\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/quarto.png){fig-align=\"center\"}\n\n-   These slides\\\n-   The course website\\\n-   Your homework\\\n-   All written in Quarto\n\n## Some R Basics\n\n### Executing R commands\n\nThree ways to execute commands in R\n\n1.  Type/copy commands directly into the \"console\"\n2.  \\`code chunks' in RMarkdown (.Rmd files)\n    -   **Cmd/Ctrl + Enter**: execute highlighted line(s) within chunk\n    -   **Cmd/Ctrl + Shift + k**: \"knit\" entire document\n3.  R scripts (.R files)\n    -   **Cmd/Ctrl + Enter**: execute highlighted line(s)\n    -   **Cmd/Ctrl + Shift + Enter** (without highlighting any lines): run entire script\n\n### Assignment\n\n**Assignment** refers to creating an \"object\" and assigning values to it\n\n-   The object may be a variable, a dataset, a bit of text that reads \"la la la\"\n-   `<-` is the assignment operator\n    -   in other languages `=` is the assignment operator\n-   general syntax:\n    -   `object_name <- object_values`\n    -   good practice to put a space before and after assignment operator\n\n### Objects\n\nR is an \"object-oriented\" programming language (like Python, JavaScript). So, what is an \"object\"?\n\n-   formal computer science definitions are confusing because they require knowledge of concepts we haven't introduced yet\n-   More intuitively, I think objects as anything I assign values to\n    -   For example, below, `a` and `b` are the names of objects I assigned values to\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nb <- \"yay!\"\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"yay!\"\n```\n:::\n:::\n\n\n-   [Ben Skinner](https://www.btskinner.io) says \"Objects are like boxes in which we can put things: data, functions, and even other objects.\"\n\n-   Many commercial statistical software packages (e.g., SPSS, Stata) operate on datasets, which consist of rows of observations and columns of variables\n\n-   Usually, these packages can open only one dataset at a time\n\n-   By contrast, in R everything is an object and there is no limit to the number of objects R can hold (except memory)\n\n### Vectors\n\nThe fundamental data structure in R is the \"vector\"\n\n-   A vector is a collection of values\n\n-   The individual values within a vector are called \"elements\"\n\n-   Values in a vector can be numeric, character (e.g., \"Apple\"), or some other *type*\n\n-   Below we use the combine function `c()` to create a numeric vector that contains three elements\n\n-   Help file says that `c()` \"combines values into a vector or list\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#?c # to see help file for the c() \"combine\" function\nx <- c(4, 7, 9) # create object called x, which is a vector with three elements \n# (each an integer)\nx # print object x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 7 9\n```\n:::\n:::\n\n\nVector where the elements are characters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimals <- c(\"lions\", \"tigers\", \"bears\", \"oh my\") # create object called animals\nanimals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"lions\"  \"tigers\" \"bears\"  \"oh my\" \n```\n:::\n:::\n\n\n## EXERCISE\n\nEither in the R console or within the R markdown file, do the following:\n\n1.  Create a vector called `v1` with three elements, where all the elements are numbers. Then print the values.\n2.  Create a vector called `v2` with four elements, where all the elements are characters (i.e., enclosed in single '' or double \"\" quotes). Then print the values.\n3.  Create a vector called `v3` with five elements, where some elements are numeric and some elements are characters. Then print the values.\n\n## Solution to Exercise\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c(1, 2, 3) \n# create a vector called v1 with three elements\n# all the elements are numbers\nv1 # print value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nv2 <- c(\"a\", \"b\", \"c\", \"d\") \n# create a vector called v2 with four elements\n# all the elements are characters\nv2 # print value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"c\" \"d\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nv3 <- c(1, 2, 3, \"a\", \"b\") \n# create a vector called v3 with five element\n# some elements are numeric and some elements are characters\nv3 # print value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"a\" \"b\"\n```\n:::\n:::\n\n\n## Formal classification of vectors in R\n\n-   Here, I introduce the classification of vectors by Grolemund and Wickham\n\n-   There are two broad types of vectors\n\n1.  **Atomic vectors**. An object that contains elements. Six \"types\" of atomic vectors:\n    -   **logical**, **integer**, **double**, **character**, **complex**, and **raw**.\n        -   **Integer** and **double** vectors are collectively known as **numeric** vectors.\n2.  **Lists**. Like atomic vectors, lists are objects that contain elements\n    -   elements within a list may be atomic vectors\n    -   elements within a list may also be other lists; that is lists can contain other lists\n\nOne difference between atomic vectors and lists: **homogeneous** vs. **heterogeneous** elements\n\n-   atomic vectors are **homogeneous**: all elements within atomic vector must be of the same type\n-   lists can be **heterogeneous**: e.g., one element can be an integer and another element can be character\n\nProblem with this classification:\n\n-   Not conceptually intutive\n-   Technically, lists are a type of vector, but people often think of atomic vectors and lists as fundamentally different things\n\n**Classification used by Ben Skinner**:\n\n-   data **type**: logical, numeric (integer and double), character, etc.\n-   data **structure**: vector, list, matrix, etc.\n\n## Using R functions\n\n### What are functions\n\n-   **Functions** are pre-written bits of code that accomplish some task.\n\n-   Functions generally follow three sequential steps:\n\n1.  take in an **input** object(s)\n2.  **process** the input.\n3.  **return** (A) a new object or (B) a visualizatoin (e.g., plot)\n\n-   For example, `sum()` function calculates sum of elements in a vector\n\n1.  **input**. takes in a vector of elements (numeric or logical)\n2.  **processing**. Calculates the sum of elements\n3.  **return**. Returns numeric vector of length=1; value is sum of input vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(c(1,2,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\ntypeof(sum(c(1,2,3))) # type of object created by sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nlength(sum(c(1,2,3))) # length of object created by sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n### Function syntax\n\nComponents of a function\n\n-   function name (e.g., `sum()`, `length()`, `seq()`)\n-   function arguments\n    -   Inputs that the function takes, which determine what function does\n        -   can be vectors, data frames, logical statements, etc.\n    -   In \"function call\" you specify values to assign to these function arguments\n        -   e.g., `sum(c(1,2,3))`\n    -   Separate arguments with a comma `,`\n        -   e.g., `seq(10,15)`\n-   Example: the sequence function, `seq()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(10,15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 11 12 13 14 15\n```\n:::\n:::\n\n\n### Function syntax: More on function arguments\n\nUsually, function arguments have names\n\n-   e.g., the `seq()` function includes the arguments `from`, `to`, `by`\n-   when you call the function, you need to assign values to these arguments; but you usually don't have to specify the name of the argument\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from=10, to=20, by=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 12 14 16 18 20\n```\n:::\n\n```{.r .cell-code}\nseq(10,20,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 12 14 16 18 20\n```\n:::\n:::\n\n:::\n\nMany function arguments have \"default values\", set by whoever wrote the function\n\n-   if you don't specify a value for that argument, the default value is inserted\n-   e.g., partial list of default values for `seq()`: `seq(from=1, to=1, by=1)`\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nseq()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nseq(to=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nseq(10) # R assigned value of 10 to \"to\" rather than \"from\" or \"by\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n:::\n\n### Help files for functions\n\n::: columns\n::: column\nTo see help file on a function, type `?function_name` without parentheses\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?sum\n?seq\n```\n:::\n\n:::\n\n::: column\n**Contents of help files**\n\n-   **Description**. What the function does\n-   **Usage**. Syntax, including default values for arguments\n-   **Arguments**. Description of function arguments\n-   **Details**. Details and idiosyncracies of about how the function works.\n-   **Value**. What (object) the function \"returns\"\n    -   e.g., `sum()` returns vector of length 1 whose value is sum of input vector\n-   **References**. Additional reading\n-   **See Also**. Related functions\n-   **Examples**. Examples of function in action\n-   Bottom of help file identifies the package the function comes from\n:::\n:::\n\n# Brief Quarto Overview\n\n## What is Quarto\n\n-   Quarto documents embed R code, output associated with R code, and text into one document\n-   An Quarto document is a \"'Living' document that updates every time you compile \\[\"Render\"\\] it\"\n-   Quarto documents have the extension .qmd\n    -   Can think of them as text files with the extension .qmd rather than .txt\n-   At top of .qmd file you specify the \"output\" style, which dictates what kind of formatted document will be created\n    -   e.g., `html_document` or `pdf_document` (this document was created with `revealjs`)\n-   When you compile \\[\"Render\"\\] a .qmd file, the resulting formatted document can be an HTML document, a PDF document, an MS Word document, or many other types\n\n## Creating Quarto documents\n\n**Do this with a partner**\n\nApproach for creating a Quarto document.\n\n1.  Point-and-click from within RStudio\n    -   Click on *File* \\>\\> *New File* \\>\\> *Quarto Document...* \\>\\> choose *HTML* \\>\\> click *OK*\n        -   Optional: add title (this is not the file name, just what appears at the top of document)\n        -   Optional: add author name\n    -   Save the .qmd file; *File* \\>\\> *Save As*\n        -   Any file name\n        -   Recommend you save it in same folder you saved this lecture\n    -   \"Render\" the entire .qmd file\n        -   Point-and-click OR shortcut: **Cmd/Ctrl + Shift + k**\n\n## Creating and Formatting Quarto Documents\n\nTake a few minutes and have you peruse the [Quarto site](https://quarto.org/docs/get-started/hello/rstudio.html) to build familiarity (I still access it all the time when I forget how to do specific things)\n\nI especially want you to take some time to peruse documents on YAML headers:\n\n-   [HTML documents](https://quarto.org/docs/reference/formats/html.html)\n-   [PDF documents](https://quarto.org/docs/reference/formats/pdf.html)\n-   [Word documents](https://quarto.org/docs/reference/formats/docx.html)\n-   [Webstes](https://quarto.org/docs/reference/projects/websites.html)\n-   [RevealJS slides](https://quarto.org/docs/reference/formats/presentations/revealjs.html)\n-   [Beamer slides](https://quarto.org/docs/reference/formats/presentations/beamer.html)\n-   [Powerpoint Slides](https://quarto.org/docs/reference/formats/presentations/pptx.html)\n\n# Course Reminders\n\n-   Problem set 1 due next Monday at 12:01 AM (grace period until 9 AM)\n-   Make sure to check out the readings\n-   There are exercises at the end that can be helpful to do. You can even download the directory of the bookdown/quarto book from GitHub (link in book)\n-   Next time:\n    -   Bring your data, ideally loaded into R (or at a piece of it is)\n    -   Part 1: Reproducibility and Using Workflows to Reflect Your Values\n    -   Part 2: Data Manipulation: `dplyr`\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}