---
title: "Week 2: Reproducibility and Data Transformations"
author: "Emorie D Beck"
format: 
  revealjs:
    incremental: true
    code-tools: true
    code-copy: true
    code-line-numbers: true
    code-link: true
    preview-links: true
    slide-number: true
    self-contained: true
    fig-height: 4
    fig-width: 6
    fig-align: center
    css: custom.css
    theme: psc290-23
    # highlight-style: atom-one-dark
    margin-left: "0"
    margin-right: "0"
    width: 1400
    footer: "PSC 290 - Data Management and Cleaning"
    logo: "https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      message = FALSE,	
                      warning = FALSE,
                      fig.width = 4, 
                      fig.height = 4, 
                      fig.retina = 3)
options(htmltools.dir.version = FALSE)
```

```{r, echo = F}
library(knitr)
library(psych)
library(emo)
library(plyr)
library(tidyverse)
```

## Overview  

Today's class outline:  
- Welcome back, questions on homework (10-15 minutes)  

- Reproducibility and Your Personal Values (10 minutes)  

- Building a Reproducible Workflow Using Projects (45 miuntes)  

- Data Transformations using `dplyr` (45 minutes)  

# Reproducibility and Your Personal Values  

## Why reproducibility AND values?  

- The definition of reproducibility is somewhat debated  
  * "'Reproducibility' refers to instances in which the original researcher's data and computer codes are used to regenerate the results"  
  * "'Reproducibility' refers to independent researchers arriving at the same results using their own data and methods"  
- But regardless of what definition you choose, reproducibility starts with a commitment in research to be 

::::{.columns}
:::{.column}

  * clear  
  * transparent  
  
:::
:::{.column}

  * honest  
  * thorough 

:::
::::

## Why reproducibility AND values?  

- Reproducibility is *ethical*.  

- When I post a project, I pour over my code for hours, adding comments, rendering to multiple formats, trying to flag locations in online materials in the mansucript, etc. 

- I am trying to prevent errors, but I am also trying to make sure that other people know what I did, especially if I did make errors  

## Why reproducibility AND values?  

- Reproducible research is also *equitable.* 

- A reproducible research workflow can be downloaded by another person as a starting point, providing tools to other researchers who may not have the same access to education and resources as you 

## Where should we reproducible? 

- Planning 
  * Study planning and design  
  * Lab Protocols   
  * Codebooks  
  * etc.  
- Analyses  
  * Scripting  
  * Communication  
  * etc.  

## Aspects of Reproducibility 

- Data within files should be 'tidy' (next week -- `tidyr`)
- Project based approach (today)
- Consistency: naming, space, style (today)
- Documentation: commenting and README (today)
- Literate programming e.g. Rmarkdown (every day!)


# Building a Reproducible Workflow Using Projects 

## Reproducible Workflow

A reproducible workflow is *organized*. What does it mean to be be organized? At least:

* Use a project based approach, e.g., RStudio project or similar  
* Have a hierarchical folder structure  
* Have a consistent and informative naming system that 'plays nice'   
* Document code with comments and analyses with README  

:::{.fragment}
More advanced (later in the class)
:::

* Generalize with functions and packages
* version control  
<!-- * [Pipeline and workflow tools](https://github.com/pditommaso/awesome-pipeline)  -->

## What is a project? 

::::{.columns}
:::{.column}

- A project is a discrete piece of work which has a number of files associated with it such as the data and scripts for an analysis and the production reports.

- Using a project-oriented workflow means to have a hierarchical folder structure with everything needed to reproduce an analysis.

:::
:::{.column}

:::{.fragment}
One research project might have several organizational projects associated with it, for example:

* data files and metadata (which may be made into a package) 
* preregistration
* analysis and reporting 
* a package developed for the analysis 
* an app for allowing data to be explored by others 

:::
:::
::::

## Example

::::{.columns}
:::{.column}

Good Workflows are:  

* structured  
* systematic  
* repeatable  

:::{.fragment}
**Naming** 
:::

* human and machine readable  
  * no spaces  
  * use snake/kebab case  
  * ordering: numbers (zero left padded), dates  
  * file extensions

:::
:::{.column}
:::{.fragment}

```
-- ipcs_data_2019
   |__ipcs_data_2019.Rproj
   |__data
      |__raw_data
         |__2019-03-21_ema_raw.csv
         |__2019-03-21_baseline_raw.csv
      |__clean_data
         |__2019-06-21_ema_long.csv
         |__2019-06-21_ema_long.RData
         |__2019-06-21_baseline_wide.csv
         |__2019-06-21_baseline_wide.RData
   |__results
      |__01_models
         |__E_mortality.RData
         |__A_mortality.RData
      |__02_summaries
         |__E_mortality.RData
         |__A_mortality.RData
      |__03_figures
         |__mortality.png
         |__mortality.pdf
      |__04_tables
         |__zero_order_cors.RData
         |__descriptives.RData
         |__key_terms.RData
         |__all_model_terms.RData
   |__README.md
   |__refs
      |__r_refs.bib
      |__proj_refs.bib
   |__analyses
      |__01_background.Rmd
      |__02_data_cleaning.Rmd
      |__03_models.Rmd
      |__04_summary.Rmd
```

:::
:::
::::

## What is a path?

A path gives the address - or location - of a filesystem object, such as a file or directory.

* Paths appear in the address bar of your browser or file explorer.
* We need to know a file path whenever we want to read, write or refer to a file using code rather than interactively pointing and clicking to navigate.
* A path can be **absolute** or **relative**
  * absolute = whole path from root
  * relative = path from current directory


## Absolute paths

- An Absolute path is given from the "root directory" of the object. 

- The root directory of a file system is the first or top directory in the hierarchy.

- For example, `C:\` or `M:\` on windows or `/` on a Mac which is displayed as Macintosh HD in Finder.

## Absolute paths

The absolute path for a file, `pigeon.txt` could be:  

* windows: `C:/Users/edbeck/Desktop/pigeons/data-raw/pigeon.txt`
* Mac/unix systems: `/Users/edbeck/Desktop/pigeons/data-raw/pigeon.txt`  
* web: `http://github.com/emoriebeck/pigeons/data/pigeon.txt`  

## What is a directory?

* Directory is the old word for what many now call a folder `r emo::ji("folder")`.
* Commands that act on directories in most programming languages and environments reflect this.

*  For example, in `R` this means "tell me my working directory":
  * `getwd()` **get** **w**orking **d**irectory in R

## What is a working directory?

- The working directory is the default location a program is using. It is where the program will read and write files by default. You have only one working directory at a time.

- The terms 'working directory', 'current working directory' and 'current directory' all mean the same thing.

:::{.fragment}

Find your current working directory with:

```{r}
getwd()
```

:::

## Relative paths

A relative path gives the location of a filesystem object *relative* to the working directory, (i.e., that returned by `getwd()`).

- When `pigeon.txt` is in the working directory the relative path is just the file        * name:  `pigeon.txt`  

- If there is a folder in the working directory called `data-raw` and `pigeon.txt` is in there then the relative path is `data-raw/pigeon.txt`  

## Paths: moving up the hierarchy

- `../` allows you to look in the directory above the working directory

- When `pigeon.txt` is in folder above the working the relative path is `../pigeon.txt`  

- And if it is in a folder called `data-raw` which is in the directory above the working directory then the relative path is `../data-raw/pigeon.txt`  

## What's in my directory?

You can list the contents of a directory using the `dir()` command

* `dir()` list the contents of the working directory
* `dir("..")` list the contents of the directory above the working directory
* `dir("../..")` list the contents of the directory two directories above the working directory
* `dir("data-raw")` list the contents of a folder call data-raw which is in the working directory.

## Relative or absolute

- Most of the time you should use relative paths because that makes your work portable (i.e. to a different machine / user / etc.).

- `r emo::ji("party")` The tab key is your friend!
- You only need to use absolute paths when you are referring to filesystem outside the one you are using.
- I often store the beginning of that path as object. 
    * web_wd <- "https://github.com/emoriebeck/pigeons/"
    * Then I can use `sprintf()` or `paste()` to add different endings

:::{.fragment}
```{r}
web_wd <- "https://github.com/emoriebeck/pigeons/"
sprintf("%s/data-raw/pigeon.txt", web_wd)
```

:::

# Example

Download and unzip [pigeons.zip](../pigeons.zip) which has the following structure:

```
-- pigeons
   |__data-processed
      |__pigeon_long.txt
   |__data-raw
      |__pigeon.txt
   |__figures
      |__fig1.tiff
   |__scripts
      |__analysis.R
      |__import_reshape.R
   |__pigeons.Rproj
```

## RStudio Projects

- Project is obviously a commonly used word. When I am referring to an [RStudio Project](https://support.posit.co/hc/en-us/articles/200526207-Using-Projects) I will use the capitalised words 'RStudio Project' or 'Project'.
- In other cases, I will use 'project'.
- An RStudio Project is a directory with an `.Rproj` file in it. 
- The name of the RStudio Project is the same as the name of the top level directory which is referred to as the Project directory.


## RStudio Projects

For example, if you create an RStudio Project `ipcs_data_2019` your folder structure would look something like this:

```
-- ipcs_data_2019
   |__ipcs_data_2019.Rproj
   |__data
      |__raw_data
         |__2019-03-21_ema_raw.csv
         |__2019-03-21_baseline_raw.csv
      |__clean_data
         |__2019-06-21_ema_long.csv
         |__2019-06-21_ema_long.RData
         |__2019-06-21_baseline_wide.csv
         |__2019-06-21_baseline_wide.RData
   |__results
      |__01_models
      |__02_summaries
      |__03_figures
      |__04_tables
   |__README.md
   |__refs
      |__r_refs.bib
      |__proj_refs.bib
   |__analyses
      |__01_background.Rmd
      |__02_data_cleaning.Rmd
      |__03_models.Rmd
      |__04_summary.Rmd
```



## RStudio Projects

- the `.RProj` file which is the defining feature of an RStudio Project

- When you open an RStudio Project, the working directory is set to the Project directory (i.e., the location of the `.Rproj` file).  

- This makes your work portable. You can zip up the project folder and send it to any person, including future you, or any computer. 

- They will be able to unzip, open the project and have all the code just work.

- (This is great for sending code and/or results to your advisors)

## Directory structure

You are aiming for structured, systematic and repeatable. For example, the Project directory might contain:

* .RProj file  
* README - tell people what the project is and how to use it  
* License - tell people what they are allowed to do with your project 
* Directories

::::{.columns}
:::{.column}

  * data/  
  * prereg/  
  * scripts/ 

:::
:::{.column}

  * results/  
  * manuscript/  

:::
::::

## README

- READMEs are a form of documentation which have been widely used for a long time. They contain all the information about the other files in a directory. They can be extensive.

* Wikipedia [README page](https://en.wikipedia.org/wiki/README)  
* GitHub Doc's [About READMEs
](https://docs.github.com/en/free-pro-team@latest/github/creating-cloning-and-archiving-repositories/about-readmes)  
* OSF 


## README

A minimal README might give:

* Title 
* Description, 50 words or so on what the project is
* Technical Description of the project
  * What software and packages are needed including versions
  * Any instructions needed to run the analysis/use the software
  * Any issues that a user might face in running the analysis/using the software
* Instructions on how to use the work
* Links to where other files, materials, etc. are stored
  * E.g., an OSF readme may point to GitHub, PsyArxiv, etc. 
  

## License

A license tells others what they can and can't do with your work.

[choosealicense.com](https://choosealicense.com/) is a useful explainer.

I typically use:

* [MIT License](https://choosealicense.com/licenses/mit/) for software
* [CC-BY-SA-4.0](https://choosealicense.com/licenses/cc-by-sa-4.0/) for other work

# Exercise

## Exercise
- You are going to create an RStudio Project with some directories and use it to organise a very simple analysis.
- The analysis will import a data file, reformat it and write the new format to file. It will then create a figure and write the image to file. 
- You'll get practice with tidying data (more on that next week) and plotting data.

## RStudio Project infrastructure

`r emo::ji("clapper")` create a new Project called `iris` by:  

- clicking **File->New Project...** 
- clicking on the little icon (second from the left) at the top

- Choose New Project, then New Directory, then New Project. Name the RStudio Project `iris`.

- Create folders in `iris` called `data-raw`, `data-processed` and `figures`.

- Start new scripts called `01-import.R`, `02-tidy.R`,  and `03-figures.R`

## Save and Import 

- Save a copy of [iris.csv](data/iris.csv) to your `data-raw` folder. These data give the information about different species of irises.

- In your `01-import.R` script, load the tidyverse set of packages.

:::{.fragment}

```{r eval=FALSE}
library(tidyverse)
write_csv(iris, file = "data-raw/iris.csv")
```

:::

## Save and Import 

- Add the command to import the data:

:::{.fragment}

```{r, eval = F}
iris <- read_csv("data-raw/iris.csv")
```

```{r, echo = F}
data(iris)
```

:::

- The relative path is `data-raw/iris.csv` because your working directory is the Project directory, `iris`.

## Reformat the data

This dataset has three observations in a row - it is not 'tidy'. 

- Open your `02-tidy.R` script, and reshape the data using:

:::{.fragment}

```{r}
iris <- pivot_longer(data = iris, 
                     cols = -Species, 
                     names_to = "attribute", 
                     values_to = "value")
```

:::

- This reformats the dataframe in R but does not overwrite the text file of the data.

- Don't worry too much about this right now. We'll spend a lot of time talking about reshaping data next week!

## Writing files

Often we want to write to files. 

- My main reasons for doing so are to save copies of data that have been processed and to save manuscripts and graphics. 
- Also, as someone who collects a lot of data, the de-identified, fully anonymized data files I can share and the identifiable data I collect require multiple versions (and encryption, keys, etc.)

## Writing files

- Write your dataframe `iris` to a csv file named `iris-long.csv` in your `data-processed` folder:

:::{.fragment}

```{r, eval = F}
file <- "data-processed/iris-long.csv"
write_csv(iris, file)
```

```{r, echo = F}
file <- "iris/data-processed/iris-long.csv"
write_csv(iris, file)
```

:::

- Putting file paths into variables often makes your code easier to read especially when file paths are long or used multiple times.

## Create a plot

Open your `03-figures.R` script and create a simple plot of this data with:

:::{.fragment}

```{r} 
fig1 <- ggplot(
  data = iris
  , aes(y = Species, x = value, fill = Species)
  ) + 
  geom_boxplot() +                       
  facet_grid(attribute~.) + 
  scale_x_continuous(name = "Attribute") +
  scale_y_discrete(name = "Species") +
  theme_classic() + 
  theme(legend.position = "none")
```

:::

## View plot

View plot with:

```{r, fig.width = 8} 
fig1
```


## Write ggplot figure to file

- A useful function for saving ggplot figures is `ggsave()`. 

- It has arguments for the size, resolution and device for the image. See the [`ggsave()` reference page](https://ggplot2.tidyverse.org/reference/ggsave.html). 


## Write ggplot figure to file

- Since I often make more than one figure, I might set these arguments first.

::::{.columns}
:::{.column}

- Assign `ggsave` argument values to variables:

:::{.fragment}

```{r}
# figure saving settings
units <- "in"  
fig_w <- 3.2
fig_h <- fig_w
dpi <- 600
device <- "tiff" 
```

:::
:::
:::{.column}

- Save the figure to your figures directory:

:::{.fragment}

```{r, eval = F}
ggsave("figures/fig1.tiff",
       plot = fig1,
       device = device,
       width = fig_w,
       height = fig_h,
       units = units,
       dpi = dpi)
```

```{r, echo = F}
ggsave("iris/figures/fig1.tiff",
       plot = fig1,
       device = device,
       width = fig_w,
       height = fig_h,
       units = units,
       dpi = dpi)
```

:::

- Check it is there!

:::
::::

------------------------------------------------------------------------

:::: {.columns style='display: flex !important; height: 90%;'}
::: {.column width="70%" style='display: flex; align-items: center;'}

<!-- <p style="font-size:160%;"> -->

# Data Manipulation in `dplyr`

<!-- </p> -->

:::

::: {.column width="30%" style='display: flex; justify-content: center; align-items: center;'}

```{r, fig.align='center', echo = F}
knitr::include_graphics("https://github.com/rstudio/hex-stickers/raw/main/thumbs/dplyr.png")
```
:::
::::

# `dplyr` Core Functions

## `dplyr` Core Functions

1.  **`%>%`**: The pipe. Read as "and then."
2.  **`filter()`**: Pick observations (rows) by their values.
3.  **`select()`**: Pick variables (columns) by their names.
4.  **`arrange()`**: Reorder the rows.
5.  **`group_by()`**: Implicitly split the data set by grouping by names (columns).
6.  **`mutate()`**: Create new variables with functions of existing variables.
7.  **`summarize()` / `summarise()`**: Collapse many values down to a single summary.

## Core Functions

::: columns
::: {.column width="40%"}
::: nonincremental
1.  **`%>%`**
2.  **`filter()`**
3.  **`select()`**
4.  **`arrange()`**
5.  **`group_by()`**
6.  **`mutate()`**
7.  **`summarize()`**
:::
:::

::: {.column width="60%" style="text-align: center; background-color: #FFD966; color: black; border: 5px solid #033266;"}
Although each of these functions are powerful alone, they are incredibly powerful in conjunction with one another. So below, I'll briefly introduce each function, then link them all together using an example of basic data cleaning and summary.
:::
:::

## 1. `%>%`

-   The pipe `%>%` is wonderful. It makes coding intuitive. Often in coding, you need to use so-called nested functions. For example, you might want to round a number after taking the square of 43.

::: fragment
```{r, echo = T}
sqrt(43)
round(sqrt(43), 2)
```
:::

## 1. `%>%`

The issue with this comes whenever we need to do a series of operations on a data set or other type of object. In such cases, if we run it in a single call, then we have to start in the middle and read our way out.

```{r, echo = T}
round(sqrt(43/2), 2)
```

## 1. `%>%`

The pipe solves this by allowing you to read from left to right (or top to bottom). The easiest way to think of it is that each call of `%>%` reads and operates as "and then." So with the rounded square root of 43, for example:

::: fragment
```{r, echo = T}
sqrt(43) %>%
  round(2)
```
:::

## 2. `filter()`

::: fragment
Often times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don't want to include.
:::

<!-- Say for example, that you're interested personality change in adolescence, but you just opened a survey up online. So when you actually download and examine your data, you realize that you have an age range of something like 3-86, not 12-18. In this case, you want to get rid of the people over 18 -- that is, `filter()` them out.   -->

::: fragment
```{r, echo=TRUE}
data(bfi) # grab the bfi data from the psych package
bfi <- bfi %>% as_tibble()
head(bfi)
```
:::

## 2. `filter()`

Often times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don't want to include.

::: fragment
```{r, echo = T}
summary(bfi$age) # get age descriptives
```
:::

## 2. `filter()`

Often times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don't want to include.

::: fragment
```{r, echo = T}
#| code-line-numbers: "|2"
bfi2 <- bfi %>% # see a pipe!
  filter(age <= 18) # filter to age up to 18

summary(bfi2$age) # summary of the new data 
```
:::

::: fragment
But this isn't quite right. We still have folks below 12. But, the beauty of `filter()` is that you can do sequence of `OR` and `AND` statements when there is more than one condition, such as up to 18 `AND` at least 12.
:::

## 2. `filter()`

Often times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don't want to include.

::: fragment
```{r, echo = T}
bfi2 <- bfi %>%
  filter(age <= 18 & age >= 12) # filter to age up to 18 and at least 12

summary(bfi2$age) # summary of the new data 
```
:::

::: fragment
Got it!
:::

## 2. `filter()`

-   But filter works for more use cases than just conditional
    -   `<`, `>`, `<=`, and `>=`
-   It can also be used for cases where we want a single values to match cases with text.
-   To do that, let's convert one of the variables in the `bfi` data frame to a string.
-   So let's change gender (1 = male, 2 = female) to text (we'll get into factors later).

::: fragment
```{r, echo = T}
bfi$education <- plyr::mapvalues(bfi$education, 1:5, c("Below HS", "HS", "Some College", "College", "Higher Degree"))
```
:::

## 2. `filter()`

Now let's try a few things:

<font color = "#033266">**1. Create a data set with only individuals with some college (`==`).**</font>

::: fragment
```{r, echo = T}
bfi2 <- bfi %>% 
  filter(education == "Some College")
unique(bfi2$education)
```
:::

## 2. `filter()`

Now let's try a few things:

<font color = "#033266">**2. Create a data set with only people age 18 (`==`).**</font>

::: fragment
```{r, echo = T}
bfi2 <- bfi %>%
  filter(age == 18)
summary(bfi2$age)
```
:::

## 2. `filter()`

Now let's try a few things:

<font color = "#033266">**3. Create a data set with individuals with some college or above (`%in%`).**</font>

::: fragment
```{r, echo = T}
bfi2 <- bfi %>%
  filter(education %in% c("Some College", "College", "Higher Degree"))
unique(bfi2$education)
```
:::

::: fragment
`%in%` is great. It compares a column to a vector rather than just a single value, you can compare it to several

```{r, echo = T}
bfi2 <- bfi %>%
  filter(age %in% 12:18)
summary(bfi2$age)
```
:::

## 3. `select()`

-   If `filter()` is for pulling certain observations (rows), then `select()` is for pulling certain variables (columns).
-   it's good practice to remove these columns to stop your environment from becoming cluttered and eating up your RAM.

## 3. `select()`

-   In our `bfi` data, most of these have been pre-removed, so instead, we'll imagine we don't want to use any indicators of Agreeableness (A1-A5) and that we aren't interested in gender.
-   With `select()`, there are few ways choose variables. We can bare quote name the ones we want to keep, bare quote names we want to remove, or use any of a number of `select()` helper functions.

## 3. `select()`:

### A. Bare quote columns we want to keep:

::: columns
::: column
::: fragment
```{r, echo = T}
#| code-line-numbers: "|2"
bfi %>%
  select(C1, C2, C3, C4, C5) %>%
  print(n = 6)
```
:::
:::

::: column
::: fragment
```{r, echo=T}
#| code-line-numbers: "|2"
bfi %>%
  select(C1:C5) %>%
  print(n = 6)
```

<!-- We can also use `:` to grab a *range* of columns.   -->
:::
:::
:::

## 3. `select()`:

### B. Bare quote columns we don't want to keep:

::: fragment
```{r, echo = T}
#| code-line-numbers: "|2"
bfi %>% 
  select(-(A1:A5), -gender) %>% # Note the `()` around the columns
  print(n = 6)
```
:::

## 3. `select()`:

### C. Add or remove using `select()` helper functions.

::: columns
::: {.column width="40%"}
-   `starts_with()`\
-   `ends_with()`
-   `contains()`
-   `matches()`
-   `num_range()`
-   `one_of()`
-   `all_of()`
:::

::: {.column width="60%"}
::: fragment
```{r, echo = T}
bfi %>%
  select(starts_with("C"))
```
:::
:::
:::

## 4. `arrange()`

-   Sometimes, either in order to get a better sense of our data or in order to well, order our data, we want to sort it
-   Although there is a base `R` `sort()` function, the `arrange()` function is `tidyverse` version that plays nicely with other `tidyverse functions`.

## 4. `arrange()`

::: columns
So in our previous examples, we could also `arrange()` our data by age or education, rather than simply filtering. (Or as we'll see later, we can do both!)

::: {.column width="50%"}
::: fragment
```{r, echo = T}
#| code-line-numbers: "|4"
# sort by age
bfi %>% 
  select(gender:age) %>%
  arrange(age) %>% 
  print(n = 6)
```
:::
:::

::: {.column width="50%"}
::: fragment
```{r, echo=TRUE}
#| code-line-numbers: "|4"
# sort by education
bfi %>%
  select(gender:age) %>%
  arrange(education) %>%
  print(n = 6)
```
:::
:::
:::

## 4. `arrange()`

We can also arrange by multiple columns, like if we wanted to sort by gender then education:

::: fragment
```{r, echo = T}
bfi %>%
  select(gender:age) %>%
  arrange(gender, education) %>% 
  print(n = 6)
```
:::

# Bringing it all together: Split-Apply-Combine

## Bringing it all together: Split-Apply-Combine

-   Much of the power of `dplyr` functions lay in the split-apply-combine method

-   A given set of of data are:

    -   *split* into smaller chunks
    -   then a function or series of functions are *applied* to each chunk
    -   and then the chunks are *combined* back together

## 5. `group_by()`

-   The `group_by()` function is the "split" of the method
-   It basically implicitly breaks the data set into chunks by whatever bare quoted column(s)/variable(s) are supplied as arguments.

## 5. `group_by()`

So imagine that we wanted to `group_by()` education levels to get average ages at each level

::: fragment
```{r, echo = T}
bfi %>%
  select(starts_with("C"), age, gender, education) %>%
  group_by(education) %>%
  print(n = 6)
```
:::

## 5. `group_by()`

-   Hadley's first law of data cleaning: "What is split, must be combined"
-   This is super easy with the `ungroup()` function:

::: fragment
```{r, echo=TRUE}
bfi %>%
  select(starts_with("C"), age, gender, education) %>%
  group_by(education) %>%
  ungroup() %>%
  print(n = 6)
```
:::

## 5. `group_by()`

Multiple `group_by()` calls overwrites previous calls:

::: fragment
```{r, echo = T}
bfi %>%
  select(starts_with("C"), age, gender, education) %>%
  group_by(education) %>%
  group_by(gender, age) %>%
  print(n = 6)
```
:::

## 6. `mutate()`

-   `mutate()` is one of your "apply" functions
-   When you use `mutate()`, the resulting data frame will have the same number of rows you started with
-   You are directly mutating the existing data frame, either modifying existing columns or creating new ones

## 6. `mutate()`

To demonstrate, let's add a column that indicated average age levels within each age group

::: fragment
```{r, echo = T}
bfi %>%
  select(starts_with("C"), age, gender, education) %>%
  arrange(education) %>%
  group_by(education) %>% 
  mutate(age_by_edu = mean(age, na.rm = T)) %>%
  print(n = 6)
```
:::

## 6. `mutate()`

`mutate()` is also super useful even when you aren't grouping

::: fragment
We can create a new category

```{r, echo = T}
bfi %>%
  select(starts_with("C"), age, gender, education) %>%
  mutate(gender_cat = plyr::mapvalues(gender, c(1,2), c("Male", "Female")))
```
:::

## 6. `mutate()`

`mutate()` is also super useful even when you aren't grouping

We could also just overwrite it:

::: fragment
```{r, echo = T}
bfi %>%
  select(starts_with("C"), age, gender, education) %>%
  mutate(gender = plyr::mapvalues(gender, c(1,2), c("Male", "Female")))
```
:::

## 7. `summarize()` / `summarise()`

::: columns
::: column
-   `summarize()` is one of your "apply" functions
-   The resulting data frame will have the same number of rows as your grouping variable
-   You number of groups is 1 for ungrouped data frames
:::

::: column
::: fragment
```{r, echo = T}
# group_by() education
bfi %>%
  select(starts_with("C"), age, gender, education) %>%
  arrange(education) %>%
  group_by(education) %>% 
  summarize(age_by_edu = mean(age, na.rm = T))  
```
:::
:::
:::

## 7. `summarize()` / `summarise()`

::: columns
::: column
::: nonincremental
-   `summarize()` is one of your "apply" functions
-   The resulting data frame will have the same number of rows as your grouping variable
-   You number of groups is 1 for ungrouped data frames
:::
:::

::: column
::: fragment
```{r, echo = T}
# no groups  
bfi %>% 
  select(starts_with("C"), age, gender, education) %>%
  arrange(education) %>%
  summarize(age_by_edu = mean(age, na.rm = T))  
```
:::
:::
:::
